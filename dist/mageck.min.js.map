{"version":3,"file":"mageck.min.js","sources":["../js/utils/alert.js","../js/data/DataHandler.js","../js/data/MageckData.js","../js/data/parsers.js","../js/utils/functions.js","../js/mageck.js"],"sourcesContent":["\n\nclass Alerts {\n    /**\n     * Utility to show alerts at the bottom of the screen\n     * @param {number} timeout default timeout for the alerts to disappear\n     */\n    constructor(timeout = 2000) {\n      this.timeout=timeout;\n      this.alertBox = $(\"<div></div>\");\n      this.alertBox.addClass(\"fixed-bottom\");\n      this.alertBox.css(\"width\", \"100vw\");\n      $(\"body\").append(this.alertBox)\n    }\n    /**\n     * Add the alert to the GUI\n     * @param {string} text \n     * @param {string} cssClass \n     */\n    _initMessage(text, cssClass) {\n      let alert = $(\"<div></div>\");\n      alert.addClass(\n        \"alert alert-dismissible\"\n      );\n      alert.css(\"width\", \"100vw\");\n      alert.css(\"margin-bottom\", \"0\");\n      alert.css(\"margin-top\", \"5px\");\n      let alert_text = $(\"<span></span>\");\n      alert_text.text(text);\n      let close_button = $(\"<button></button>\");\n      close_button.addClass(\"btn-close\");\n      close_button.on(\"click\",(e) => {\n        alert.remove()\n      });\n      alert.append(alert_text);\n      alert.append(close_button);\n      setTimeout(() => {\n        alert.remove();\n      }, this.timeout);\n      alert.addClass(cssClass);\n      this.alertBox.append(alert);\n    }\n    /**\n     * Show a warning alert\n     * @param {string} text \n     */\n    warning(text) {\n      this._initMessage(text, \"alert-warning\");\n    }\n    /**\n     * Show an error alert\n     * @param {string} text \n     */\n    error(text) {\n      this._initMessage(text, \"alert-danger\");\n    }\n    /**\n     * Show a success alert\n     * @param {string} text \n     */\n    success(text) {\n      this._initMessage(text, \"alert-success\");\n    }\n  }\n\n  export {Alerts}","/**\n * Perform a basic search filter on a single instance of a data element\n * @param {*} dat\n * @param {*} search\n * @returns boolean\n */\nfunction basic_search(dat, search) {\n  return (\n    dat.gene.match(search) ||\n    (dat.sgrna && dat.sgrna.match(search)) ||\n    (dat.library && dat.library.match(search))\n  );\n}\n\nfunction generateSearcher(builder_search) {\n  let opts = [];\n  builder_search.criteria.forEach((crit) => {\n    if (crit.type == \"num\") crit.value = crit.value.map((v) => parseFloat(v));\n    let op = (v)=>true;\n    let data = crit.origData;\n    let getData = (v)=>v[data]\n    if ( data.includes(\".\" )){\n      data=data.split(\".\");\n      getData = (v)=>v[data[0]][data[1]]\n    }\n    switch (crit.condition) {\n      case \"!=\":\n        op = (v)=>getData(v)!=crit.value[0]\n        break;\n      case \"=\":\n        op = (v)=>getData(v)==crit.value[0]\n        break;\n      case \"<\":\n        op = (v)=>getData(v)<crit.value[0]\n        break;\n      case \"<=\":\n        op = (v)=>getData(v)<=crit.value[0]\n        break;\n      case \">\":\n        op = (v)=>getData(v)>crit.value[0]\n        break;\n      case \">=\":\n        op = (v)=>getData(v)>=crit.value[0]\n        break;\n      case \"between\":\n        op = (v)=> getData(v) >= crit.value[0] && getData(v) <= crit.value[1]\n        break;\n      case \"!between\":\n        op = (v)=> getData(v) < crit.value[0] || getData(v) > crit.value[1]\n        break;\n      case \"starts\":\n        op = (v)=> getData(v).startsWith(crit.value[0])\n        break;\n      case \"!starts\":\n        op = (v)=> !getData(v).startsWith(crit.value[0])\n        break;\n      case \"contains\":\n        op = (v)=> getData(v).includes(crit.value[0])\n        break;\n      case \"!contains\":\n        op = (v)=> !getData(v).includes(crit.value[0])\n        break;\n      case \"ends\":\n        op = (v)=> getData(v).endsWith(crit.value[0])\n        break;\n      case \"!ends\":\n        op = (v)=> !getData(v).endsWith(crit.value[0])\n        break;\n    }\n    opts.push(op);\n  });\n  if (builder_search.logic == \"AND\" ){\n    return (v)=>{\n      for (let op in opts){\n        if ( !opts[op](v)) return false;\n      }\n      return true;\n    }\n  } else {\n    return (v)=>{\n      let out=false;\n      for (let op in opts){\n        out = out || opts[op](v);\n      }\n      return out;\n    }\n  }\n}\n\nclass DataHandler {\n  constructor() {}\n  data = [];\n  header = [];\n  _order = [];\n  _filtered = [];\n  _prevSearch = \"{}\";\n  _prevOrder = \"{}\";\n  _prevNormalization = \"\";\n\n  async apply_normalization(norm, normalization_factors, samples) {\n    if (this._prevNormalization != norm) {\n      this.data.forEach((d) => {\n        samples.forEach((s, idx) => {\n          d[s.name] =\n            Math.round(d.counts[idx] * normalization_factors[norm][idx] * 100) /\n            100;\n        });\n      });\n    }\n  }\n\n  /**\n   * Fetch data for Datatables.net table, as it would a server-side. This little trick save lots of memory and is faster than the built-in method\n   * @param {any} request Datatables request object\n   * @param {any} settings Datatables settings object\n   * @returns\n   */\n  async getData(request) {\n    \n    let out = {\n      draw: request.draw,\n      recordsTotal: this.data.length,\n      recordsFiltered: 0,\n      data: [],\n    };\n    if ( request == 'filtered' ){\n      out.data = this._order.map((v) => this.data[v]); \n      return out;\n    }\n    if ( request == 'all' ){\n      out.data = this.data;\n      return out;\n    }\n    let search = {\n      basic: request.search,\n      builder: request.searchBuilder,\n      selected_genes : request.selected_genes\n    };\n    if (this._prevSearch != JSON.stringify(search)) {\n      this._prevSearch = JSON.stringify(search);\n      let has_basic_search =\n        search.basic && search.basic.value && search.basic.value.length > 0;\n      let has_builder_search =\n        search.builder &&\n        search.builder &&\n        search.builder.criteria &&\n        search.builder.criteria.length > 0;\n      let has_selected_genes = search.selected_genes && search.selected_genes.length > 0;\n      this._filtered = [...Array(this.data.length).keys()];\n      if ( has_selected_genes ){\n        this._filtered = this._filtered.filter((el)=>search.selected_genes.includes(this.data[el].gene));\n      }\n      if (has_builder_search) {\n        let builder_search = generateSearcher(search.builder);\n        if (has_basic_search) {\n          this._filtered = this._filtered\n            .filter((idx) => basic_search(this.data[idx], search.basic.value))\n            .filter((idx) => builder_search(this.data[idx]));\n        } else {\n          this._filtered = this._filtered.filter((idx) =>\n            builder_search(this.data[idx])\n          );\n        }\n      } else {\n        if (has_basic_search) {\n          this._filtered = this._filtered.filter((idx) =>\n            basic_search(this.data[idx], search.basic.value)\n          );\n        }\n      }\n    }\n    \n    if (this._prevOrder != JSON.stringify(request.order) || this._filtered.length > this._order.length ) {\n      this._prevOrder = JSON.stringify(request.order);\n      this._order = JSON.parse(JSON.stringify(this._filtered));\n      let order_col = request.columns[request.order[0].column].data;\n      let order_dir = request.order[0].dir == \"asc\" ? 1 : -1;\n      if (order_col.includes(\".\")) {\n        order_col = order_col.split(\".\");\n        this._order.sort((a, b) => {\n          return this.data[a][order_col[0]][order_col[1]] >\n            this.data[b][order_col[0]][order_col[1]]\n            ? order_dir\n            : -order_dir;\n        });\n      } else {\n        this._order.sort((a, b) => {\n          return this.data[a][order_col] > this.data[b][order_col]\n            ? order_dir\n            : -order_dir;\n        });\n      }\n    }\n    if ( this._filtered.length != this._order.length ){\n      this._order = this._order.filter(v=>this._filtered.includes(v))\n    }    \n\n    out.data = this._order.slice(request.start, request.start + request.length)\n      .map((v) => this.data[v]);\n    out.recordsFiltered = this._filtered.length;\n    return out;\n  }\n\n  get length() {\n    return this.data.length;\n  }\n}\n\nexport { DataHandler };\n","\nimport { DataHandler } from \"./DataHandler\";\nimport {parseGeneSummaryData, parseSgCountData, parseSgRNASummaryData} from \"./parsers\"\nconst CONTROL_GENE = \"NO-TARGET\";\nconst COLOR_P = [\"#04AF54\", \"#AFAA05\", \"#5D05AF\", \"#AF0585\", \"#68DE3D\"];\n\nclass MageckData {\n  /**\n   * Create a GeneSummary object to handle the data from *.gene_summary.txt files\n   */\n  constructor() {}\n  gene_data = new DataHandler();\n  sg_data = new DataHandler();\n  samples = [];\n  header = [];\n  _selectedGenes = [];\n  _prevNorm =\"\";\n  sgLibrary = [];\n  counts = false;\n  control_gene =CONTROL_GENE;\n  colors = COLOR_P\n\n  /**\n   * Change the predefined color palettes for the genes\n   * @param {string[]} colors \n   */\n  setColorPalette(colors){\n    if ( typeof colors == typeof this.colors ){\n      this.colors = colors;\n    } else {\n      throw(\"Wrong color types. Expectd \"+(typeof this.colors)+\", got \"+(typeof colors));\n    }\n  }\n \n\n  \n\n  /**\n   * Return true if the gene summary data is loaded\n   */\n  get ready() {\n    return this.gene_data.length > 0 && this.sg_data.length && (this.counts);\n  }\n  /**\n   * Select or deselect a gene\n   * @param {string} name Gene name\n   */\n  toggleGene(name){\n    let idx = this._selectedGenes.findIndex((g)=>g.name == name);\n    if (idx  == -1 ){\n      this._selectedGenes.push({name : name, color : this.colors[this._selectedGenes.length%this.colors.length]})\n    } else {\n      this._selectedGenes.splice(idx, 1);\n    }\n  }\n  \n  /**\n   * \n   * @param {string} name Gene name\n   * @returns boolean true if the gene is selected\n   */\n  isSelected(name){\n    return this._selectedGenes.findIndex((g)=>g.name == name) != -1;\n  }\n  \n\n  get selectedGenes(){\n    return this._selectedGenes;\n  }\n\n  /**\n   * Fetch data for Datatables.net table, as it would a server-side. This little trick save lots of memory and is faster than the built-in method\n   * @param {any} request Datatables request object\n   * @param {any} settings Datatables settings object\n   * @returns \n   */\n  async getGeneData(request){\n    let out = await this.gene_data.getData(request);\n    out.data.forEach((d)=>{\n      if (this.isSelected(d.gene)){\n        d[\"DT_RowClass\"]=\"selected\"\n      } else {\n        d[\"DT_RowClass\"]=\"\"\n      }\n    })\n    return out;\n  }\n\n  /**\n   * Fetch data for Datatables.net table, as it would a server-side. This little trick save lots of memory and is faster than the built-in method\n   * @param {any} request Datatables request object\n   * @param {any} settings Datatables settings object\n   * @returns \n   */\n  async getSgRNAData(request, norm){\n    if (this._prevNorm!= norm){\n      await this.sg_data.apply_normalization(norm, this.normalization_factors, this.samples)\n      this._prevNorm = norm;\n    }\n    if (typeof request != typeof \"\"){\n      request.selected_genes = this._selectedGenes.map((g)=>g.name);\n    }\n    return await this.sg_data.getData(request)  \n  }\n\n  /**\n   * Parse and import a *.gene_summary.txt file\n   * @param {string} data The content of a *.gene_summary.txt file\n   * @returns Promise<void>\n   */\n  async parseGeneSummary(data) {\n    let dat = await parseGeneSummaryData(data);\n    this.gene_data.data = dat.data;\n    this.gene_data.header = data.header;\n  }\n  /**\n   * Parse and import a *.gene_summary.txt file\n   * @param {string} data The content of a *.gene_summary.txt file\n   * @returns Promise<void>\n   */\n  async parseSgRNASummary(data) {\n    let dat = await parseSgRNASummaryData(data);\n    this.sg_data.data = dat.data;\n    this.sg_data.header = dat.header;\n  }\n   /**\n   * Parse and import a *.sgrna_summary.txt file\n   * @param {string} data The text content of a *.sgrna_summary.txt file\n   * @returns Promise<void>\n   */\n  async parseSgCount(data) {\n    let dat = await parseSgCountData(data)\n    this.counts = dat.counts;\n    this.samples = dat.samples;\n  }\n  /**\n   * True if there is at least one library loaded\n   */\n  get hasLibrary() {\n    return this.sgLibrary.length > 0;\n  }\n\n  /**\n   * Parse a library file\n   * @param {*} file file value of an input element (let file = el.files[0])\n   * @param {*} libName name of the library\n   * @returns Promise<number> return the index of the added library\n   */\n  parseLibrary(file, libraryName) {\n    return new Promise((resolve, reject) => {\n      let reader = new FileReader();\n      let data = \"\";\n      reader.onload = () => {\n        data = data + reader.result;\n      };\n      reader.readAsText(file);\n      reader.onloadend = () => {\n        let lib = { name: libraryName, sgrnas: [] };\n        data = data.split(\"\\n\");\n        let line;\n        for (let idx = 0; idx < data.length; idx++) {\n          line = data[idx].split(\"\\t\");\n          lib.sgrnas.push(line[0]);\n        }\n        this.sgLibrary.push(lib);\n        resolve(this.sgLibrary.length - 1);\n      };\n    });\n  }\n \n  /**\n   * Prepare the dataset by merging the information of the count and the summary files\n   * @returns Promise<void>\n   */\n  async mergeCountSummary() {\n    if (this.hasLibrary) {\n      this.sg_data.data.forEach((sg) => {\n        sg.counts = this.counts[sg.sgrna];\n        sg.library = this.sgLibrary.find((sgl) =>\n          sgl.sgrnas.includes(sg.sgrna)\n        )?.name;\n      });\n    } else {\n      /// Calabrese Libraries: setA are just number, setB are geneName_number\n      this.sg_data.data.forEach((sg) => {\n        sg.counts = this.counts[sg.sgrna];\n        sg.library = sg.sgrna.match(/^[0-9]+$/) ? \"libA\" : \"libB\";\n      });\n    }\n    this.counts = true;\n    this.normalization_factors = this.computeNormalizationFactors(this.sg_data.data);\n    console.log(this.normalization_factors)\n    return;\n      \n  }\n  /**\n   * Compute the normalization factors over the control as done in MAGeCK\n   * @param {{gene : string, counts :number[]}[]} data The data from which the normalization factors are computed\n   * @returns number[]\n   */\n  _computeControlNormFactor(data) {\n    let d1 = data.filter((sg) => sg.gene == this.control_gene);\n    if (d1.length == 0) {\n      return Array(data[0].counts.length).fill(1);\n    } else {\n      return this._computeMedianNormFactor(d1);\n    }\n  }\n\n  /**\n   * Compute the normalization factors over the median as done in MAGeCK\n   * @param {{gene : string, counts :number[]}[]} data The data from which the normalization factors are computed\n   * @returns number[]\n   */\n  _computeMedianNormFactor(data) {\n    let n = data[0].counts.length;\n    let m = data.length;\n    let meanVal = Array(m).fill(-1);\n    data.forEach((cnt, idx) => {\n      if (cnt.counts.reduce((p, v) => p + v, 0) > 0) {\n        meanVal[idx] = Math.exp(\n          (cnt.counts.map((v) => Math.log(v + 1)).reduce((p, c) => p + c, 0) *\n            1.0) /\n            n\n        );\n        if (meanVal[idx] <= 0) {\n          meanVal[idx] = 1;\n        }\n      }\n    });\n    let medianFactor = Array(n).fill(0);\n    for (let ni = 0; ni < n; ni++) {\n      let meanFactor = data\n        .map((sg, idx) => sg.counts[ni] / meanVal[idx])\n        .filter((v, idx) => meanVal[idx] != -1);\n      let xFactor = meanFactor.sort()[Math.floor(meanFactor.length / 2)];\n      medianFactor[ni] = xFactor > 0 ? 1.0 / xFactor : 0;\n    }\n    return medianFactor;\n  }\n\n  /**\n   * Compute the normalization factors over the total counts as done in MAGeCK\n   * @param {{gene : string, counts :number[]}[]} data The data from which the normalization factors are computed\n   * @returns number[]\n   */\n  _computeTotalNormFactor(data) {\n    let n = data[0].counts.length;\n    let m = data.length;\n    let sumSamples = Array(n).fill(0);\n    data.forEach((cnt) => {\n      cnt.counts.forEach((v, i) => (sumSamples[i] += v));\n    });\n    let avgSample = sumSamples.reduce((p, c) => p + c, 0) / n;\n    return sumSamples.map((v) => avgSample / v);\n  }\n  /**\n   * Compute all the normalization factors as done in MAGeCK\n   * @param {{gene : string, counts :number[]}[]} data The data from which the normalization factors are computed\n   * @returns {raw : number[],total : number[], median : number[], control : number[]}\n   */\n  computeNormalizationFactors(data) {\n    /// Adapted from mageckCountNorm.py\n    let normalization_factors = {};\n    normalization_factors.raw = Array(data[0].counts.length).fill(1);\n    normalization_factors.total = this._computeTotalNormFactor(data);\n    normalization_factors.median = this._computeMedianNormFactor(data);\n    normalization_factors.control = this._computeControlNormFactor(data);\n    return normalization_factors;\n  }\n\n  \n}\n\nexport {MageckData}","function parseGeneSummaryData(data) {\n  return new Promise((resolve, reject) => {\n    let out = { data: [], header: [] };\n    data = data.split(\"\\n\");\n    let line;\n    for (let idx = 0; idx < data.length; idx++) {\n      line = data[idx].split(\"\\t\");\n      if (idx == 0) {\n        if (line[0] != \"id\" || line[1] != \"num\" || line.length != 14) {\n          reject(\"The input file is not a gene Summary generated by MAGeCK.\");\n          return;\n        } else {\n          out.header = line;\n        }\n      } else {\n        if (line.length == 14) {\n          let d = {\n            gene: line[0],\n            numSgRNA: parseInt(line[1]),\n            neg: {\n              score: parseFloat(line[2]),\n              pvalue: parseFloat(line[3]),\n              FDR: parseFloat(line[4]),\n              rank: parseFloat(line[5]),\n              good: parseInt(line[6]),\n              LFC: parseFloat(line[7]),\n            },\n            pos: {\n              score: parseFloat(line[8]),\n              pvalue: parseFloat(line[9]),\n              FDR: parseFloat(line[10]),\n              rank: parseFloat(line[11]),\n              good: parseInt(line[12]),\n              LFC: parseFloat(line[13]),\n            },\n            best: \"pos\",\n            rank: 0,\n          };\n          if (d.neg.pvalue == d.pos.pvalue) {\n            if (Math.abs(d.neg.LFC) > d.pos.LFC) {\n              d.best = \"neg\";\n            }\n          } else {\n            if (d.neg.pvalue < d.pos.pvalue) {\n              d.best = \"neg\";\n            }\n          }\n          d.LFC = d[d.best].LFC;\n          d.pvalue = d[d.best].pvalue;\n          d.FDR = d[d.best].FDR;\n          out.data.push(d);\n        }\n      }\n    }\n    let ranking = [...Array(out.data.length).keys()];\n    ranking = ranking.sort((a, b) => {\n      return out.data[a].LFC > out.data[b].LFC ? -1 : 1;\n    });\n    ranking.forEach((idx, r) => {\n      out.data[idx].rank = r;\n    });\n    resolve(out);\n  });\n}\n\n/**\n   * Parse and import a *.sgrna_summary.txt file\n   * @param {string} data The text content of a *.sgrna_summary.txt file\n   * @returns Promise<void>\n   */\nfunction parseSgCountData(data) {\n  return new Promise((resolve, reject) => {\n    let out = { counts : {}, samples : [] };\n    data = data.split(\"\\n\");\n    let line;\n    for (let idx = 0; idx < data.length; idx++) {\n      line = data[idx].split(\"\\t\");\n      if (idx == 0) {\n        if (line[0] != \"sgRNA\" || line[1] != \"Gene\") {\n          reject(\"The input file is not a sgRNA count generated by MAGeCK.\");\n          return;\n        } else {\n          out.samples = line.slice(2).map((v, idx) => {\n            return { name: v.replace(\"\\.\", \"_\"), order: idx };\n          });\n        }\n      } else {\n        out.counts[line[0]] = line.slice(2).map((v) => parseFloat(v));\n      }\n    }\n    resolve(out);\n    return;\n  });\n}\n\n/**\n   * Parse and import a *sgrna_summary.txt file\n   * @param {string} data the content of a sgrna summary file\n   * @returns Promise<void>\n   */\nfunction parseSgRNASummaryData(data) {\n  return new Promise((resolve, reject) => {\n    let out = { data : [] , header : []};\n    data = data.split(\"\\n\");\n    let line;\n    for (let idx = 0; idx < data.length; idx++) {\n      line = data[idx].split(\"\\t\");\n      if (idx == 0) {\n        if (line[0] != \"sgrna\" || line[1] != \"Gene\" || line.length != 15) {\n          reject(\n            \"The input file is not a single guide RNA Summary generated by MAGeCK.\"\n          );\n          return;\n        } else {\n          out.header = line;\n        }\n      } else {\n        if (line.length == 15) {\n          out.data.push({\n            sgrna: line[0],\n            gene: line[1],\n            control_count : line[2],\n            treatment_count : line[3],\n            means: line.slice(4, 6).map((v) => parseFloat(v)),\n            LFC: parseFloat(line[6]),\n            control_var: parseFloat(line[7]),\n            adj_var: parseFloat(line[8]),\n            score: parseFloat(line[9]),\n            pLow: parseFloat(line[10]),\n            pHigh: parseFloat(line[11]),\n            pvalue: parseFloat(line[12]),\n            FDR: parseFloat(line[13]),\n            highInTreatment: line[14] == \"True\",\n          });\n        }\n      }\n    }\n    resolve(out)\n  });\n}\n\nexport {parseGeneSummaryData, parseSgCountData, parseSgRNASummaryData}","/**\n * Download a text file with a given filename\n * @param {string} filename \n * @param {string} text \n */\nfunction download(filename, text) {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n\nexport {download}","import { Alerts } from \"./utils/alert\";\nimport { MageckData } from \"./data/MageckData\";\nimport { download } from \"./utils/functions\";\nimport $ from \"jquery\";\n\nconst SGC_DT = \"sgrna\";\nconst SGS_DT = \"sgrnaSummary\";\nconst GS_DT = \"geneSummary\";\nconst KEEP_FRACTION = 0.1;\nconst PLOTS_WITH_SELECTION = [\"#mgkv-line-sgrna\", \"#mgkv-volcano-gene\", \"#mgkv-volcano-sg\"];\n\nclass MGKV {\n  /**\n   * Initialize MAGeCK View in the given dom.\n   * @param {string|jQueryDOM} root : id of the DIV or jQuery element\n   */\n  constructor(root) {\n    if (typeof root == \"string\") {\n      this.root = $(root);\n    } else {\n      this.root = root;\n    }\n    this.root.addClass(\"visually-hidden\");\n    this.root.append(\n      $(\n        \"<div class='row'><div class='col-12'><h3>Genes summary</h3></div><div class='col-12'><table class='table table-striped table-bordered' id='mgkv-gene-table'></table></div></div>\"\n      )\n    );\n    this.root.append(\n      $(\n        \"<div class='row'><div class='col-12 mt-3'><h3>sgRNA summary</h3></div><div class='col-12'><table class='table table-striped table-bordered' id='mgkv-sg-table'></table></div></div>\"\n      )\n    );\n    this.root.append(\n      $(\n        \"<div class='row'><div class='col-12 mt-3'><h3>Plots </h3></div><div class='col-12'><div id='mgkv-plotly-buttons' class='btn-group'></div></div><div class='col-12 mt-2'><div id='mgkv-plotly-options'></div></div><div class='col-12'><div id='mgkv-plotly' style='min-height:80vh'></div></div></div>\"\n      )\n    );\n    this._initSgBoxplot();\n    this._initVolcanoPlot();\n    this._initSgLinePlot();\n    this.alerts = new Alerts();\n    this.data = new MageckData();\n  }\n\n  geneTable = undefined;\n  sgTable = undefined;\n  _display_count_normalization = \"raw\";\n  _last_plot =\"\";\n  afterInit = () => {};\n  /**\n   * Parse a library file\n   * @param {*} file file value of an input element (let file = el.files[0])\n   * @param {*} libName name of the library\n   * @returns Promise<number> return the index of the added library\n   */\n  parseLibrary(file, libName) {\n    return this.data.parseLibrary(file, libName);\n  }\n\n  /**\n   * Get the list of library loaded\n   */\n  get library() {\n    return this.data.sgLibrary;\n  }\n\n  /**\n   * Set the control gene\n   * @param {string} gene\n   */\n  setControlGene(gene) {\n    this.data.control_gene = gene;\n  }\n\n  /**\n   * Parse an input file as gene summary, sgRNA count or summary\n   * @param {*} file file value of an input element (let file = el.files[0])\n   * @param {*} data_type one of \"sgrna\", \"sgrnaSummary\" or \"geneSummary\";\n   * @returns Promise<void>\n   */\n  parse(file, data_type) {\n    return new Promise((resolve, reject) => {\n      if (this._validInput(file.name, data_type)) {\n        let reader = new FileReader();\n        let data = \"\";\n        reader.onload = () => {\n          data = data + reader.result;\n        };\n        reader.readAsText(file);\n        reader.onloadend = () => {\n          let exec = undefined;\n          if (data_type == SGC_DT) {\n            exec = this.data.parseSgCount(data);\n          }\n          if (data_type == GS_DT) {\n            exec = this.data.parseGeneSummary(data);\n          }\n          if (data_type == SGS_DT) {\n            exec = this.data.parseSgRNASummary(data);\n          }\n          exec\n            .then((res) => {\n              this.alerts.success(\"File \" + file.name + \" imported correctly\");\n              resolve(res);\n            })\n            .catch((err) => {\n              console.log(err);\n              this.alerts.error(err);\n              reject(err);\n            });\n        };\n      } else {\n        this.alerts.error(\n          \"The file has an invalid name. Please, use the outputs of MAGeCK.\"\n        );\n        reject(\"Invalid name\");\n      }\n    });\n  }\n\n  /**\n   * If the necessary files are imported, load the GUI\n   * @returns Promise<void>\n   */\n  async load() {\n    if (this.ready) {\n      await this._loading(true);\n      await this.data.mergeCountSummary();\n      await this._initTables();\n      await this._loading(false);\n    } else {\n      throw \"Not ready\";\n    }\n  }\n  /**\n   * True if the required files are loaded\n   */\n  get ready() {\n    return this.data.ready;\n  }\n  /**\n   * List of samples loaded ( sgRNA count derived )\n   */\n  get samples() {\n    return this.data.samples;\n  }\n\n  /**\n   * Initialize the sgBoxplot options\n   */\n  _initSgBoxplot() {\n    $(\"#mgkv-plotly-buttons\").append(\n      \"<button class='btn btn-primary' id='mgkv-boxplot-sgrna'>sgRNA boxplot</button>\"\n    );\n    $(\"#mgkv-plotly-options\").append(\n      \"<div id='mgkv-plt-opts-sgb' class='btn-group mgkv-plt-opts row visually-hidden'>\" +\n        \"<div class='col'><select class='form-select' id='mgkv-plt-opts-sgb-norm'>\" +\n        \"<option value='raw' selected>Raw counts</option>\" +\n        \"<option value='total'>Total normalization</option>\" +\n        \"<option value='median'>Median normalization</option>\" +\n        \"<option value='control'>Control normalization (equal median of NO-TARGET sgRNA)</option>\" +\n        \"</select></div>\" +\n        \"<div class='col'><select class='form-select' id='mgkv-plt-opts-sgb-scale'>\" +\n        \"<option value='log10' selected>Log10</option>\" +\n        \"<option value='linear'>Linear</option>\" +\n        \"<option value='log2'>Log2</option>\" +\n        \"</select></div>\" +\n        \"</div>\"\n    );\n    $(\"#mgkv-boxplot-sgrna\").on(\"click\", () => {\n      $(\"#mgkv-plotly-buttons>button\").removeClass(\"active\");\n      $(\"#mgkv-boxplot-sgrna\").addClass(\"active\");\n      $(\".mgkv-plt-opts\").addClass(\"visually-hidden\");\n      $(\"#mgkv-plt-opts-sgb\").removeClass(\"visually-hidden\");\n      let opts = { norm: \"raw\", scale: \"log10\" };\n      opts.norm = $(\"#mgkv-plt-opts-sgb-norm\").val();\n      opts.scale = $(\"#mgkv-plt-opts-sgb-scale\").val();\n      this._last_plot = \"#mgkv-boxplot-sgrna\";\n      this._sgBoxPlot(opts);\n    });\n    $(\"#mgkv-plt-opts-sgb select\").on(\"change\", ()=>{\n      $(\"#mgkv-boxplot-sgrna\").trigger(\"click\");\n    })\n  }\n  /**\n   * Initialize the sgLinePlot options\n   */\n  _initSgLinePlot() {\n    $(\"#mgkv-plotly-buttons\").append(\n      \"<button class='btn btn-primary' id='mgkv-line-sgrna'>sgRNA expression</button>\"\n    );\n    $(\"#mgkv-plotly-options\").append(\n      \"<div id='mgkv-plt-opts-sgl' class='btn-group mgkv-plt-opts row visually-hidden'>\" +\n        \"<div class='col'><select class='form-select' id='mgkv-plt-opts-sgl-norm'>\" +\n        \"<option value='raw' selected>Raw counts</option>\" +\n        \"<option value='total'>Total normalization</option>\" +\n        \"<option value='median'>Median normalization</option>\" +\n        \"<option value='control'>Control normalization (NO-TARGET sgRNA)</option>\" +\n        \"</select></div>\" +\n        \"<div class='col'><select class='form-select' id='mgkv-plt-opts-sgl-scale'>\" +\n        \"<option value='log10' selected>Log10</option>\" +\n        \"<option value='linear'>Linear</option>\" +\n        \"<option value='log2'>Log2</option>\" +\n        \"</select></div>\" +\n        \"</div>\"\n    );\n    $(\"#mgkv-line-sgrna\").on(\"click\",() => {\n      $(\"#mgkv-plotly-buttons>button\").removeClass(\"active\");\n      $(\"#mgkv-line-sgrna\").addClass(\"active\");\n      $(\".mgkv-plt-opts\").addClass(\"visually-hidden\");\n      $(\"#mgkv-plt-opts-sgl\").removeClass(\"visually-hidden\");\n      let opts = { norm: \"raw\", scale: \"log10\" };\n      opts.norm = $(\"#mgkv-plt-opts-sgl-norm\").val();\n      opts.scale = $(\"#mgkv-plt-opts-sgl-scale\").val();\n      this._last_plot = \"#mgkv-line-sgrna\";\n      this._sgLinePlot(opts);\n    });\n    $(\"#mgkv-plt-opts-sgl select\").on(\"change\", ()=>{\n      $(\"#mgkv-line-sgrna\").trigger(\"click\");\n    })\n  }\n\n  /**\n   * Initialize the VolcanoPlots options\n   */\n  _initVolcanoPlot() {\n    $(\"#mgkv-plotly-buttons\").append(\n      \"<button class='btn btn-primary' id='mgkv-volcano-gene'>Genes Volcano Plot</button>\"\n    );\n    $(\"#mgkv-plotly-buttons\").append(\n      \"<button class='btn btn-primary' id='mgkv-volcano-sg'>sgRNA Volcano Plot</button>\"\n    );\n    $(\"#mgkv-plotly-options\").append(\n      \"<div id='mgkv-plt-opts-gvp' class='btn-group mgkv-plt-opts row visually-hidden'>\" +\n        \"<div class='col'><select class='form-select' id='mgkv-plt-opts-gvp-y'>\" +\n        \"<option value='pvalue' selected>p-value</option>\" +\n        \"<option value='FDR'>FDR</option></select></div>\" +\n        \"<div class='col'><select class='form-select' id='mgkv-plt-opts-gvp-grp'>\" +\n        \"<option value='best' selected title='Most significant between positive and negative p-value'>Best</option>\" +\n        \"<option value='neg'>Negative</option>\" +\n        \"<option value='pos'>Positive</option></select></div>\" +\n        \"<div class='col'><div class='input-group'><span class='input-group-text'>Significance threshold</span><input class='form-control' id='mgkv-plt-opts-gvp-thr0' type='number' value='0.05' ></div></div>\" +\n        \"<div class='col'><div class='input-group'><span class='input-group-text'>Absolute LogFC threshold</span><input class='form-control' id='mgkv-plt-opts-gvp-thr1' type='number' value='1.0' ></div></div>\" +\n        \"</div>\"\n    );\n    $(\"#mgkv-plotly-options\").append(\n      \"<div id='mgkv-plt-opts-svp' class='btn-group mgkv-plt-opts row visually-hidden'>\" +\n        \"<div class='col'><select class='form-select' id='mgkv-plt-opts-svp-y'>\" +\n        \"<option value='pvalue' selected>p-value</option>\" +\n        \"<option value='FDR'>FDR</option>\" +\n        \"<option value='pLow'>p-value low</option>\" +\n        \"<option value='pHigh'>p-value high</option></select></div>\" +\n        \"<div class='col'><div class='input-group'><span class='input-group-text'>Significance threshold</span><input class='form-control' id='mgkv-plt-opts-svp-thr0' type='number' value='0.05' ></div></div>\" +\n        \"<div class='col'><div class='input-group'><span class='input-group-text'>Absolute LogFC threshold</span><input class='form-control' id='mgkv-plt-opts-svp-thr1' type='number' value='1.0' ></div></div>\" +\n        \"<small>For performance reasons some data in dense regions are omitted.</small>\" +\n        \"</div>\"\n    );\n    $(\"#mgkv-volcano-gene\").on(\"click\", () => {\n      $(\"#mgkv-plotly-buttons>button\").removeClass(\"active\");\n      $(\"#mgkv-volcano-gene\").addClass(\"active\");\n      $(\".mgkv-plt-opts\").addClass(\"visually-hidden\");\n      $(\"#mgkv-plt-opts-gvp\").removeClass(\"visually-hidden\");\n      let opts = { value: \"pvalue\", group: \"best\", thr: [0.05, 1] };\n      opts.value = $(\"#mgkv-plt-opts-gvp-y\").val();\n      opts.group = $(\"#mgkv-plt-opts-gvp-grp\").val();\n      opts.thr[0] = parseFloat($(\"#mgkv-plt-opts-gvp-thr0\").val());\n      opts.thr[1] = parseFloat($(\"#mgkv-plt-opts-gvp-thr1\").val());\n      this._last_plot = \"#mgkv-volcano-gene\";\n      this._geneVolcanoPlot(opts);\n    });\n    $(\"#mgkv-plt-opts-gvp select\").on(\"change\", ()=>{\n      $(\"#mgkv-volcano-gene\").trigger(\"click\");\n    })\n    $(\"#mgkv-volcano-sg\").on(\"click\", () => {\n      $(\"#mgkv-plotly-buttons>button\").removeClass(\"active\");\n      $(\"#mgkv-volcano-sg\").addClass(\"active\");\n      $(\".mgkv-plt-opts\").addClass(\"visually-hidden\");\n      $(\"#mgkv-plt-opts-svp\").removeClass(\"visually-hidden\");\n      let opts = { value: \"pvalue\", thr: [0.05, 1] };\n      opts.value = $(\"#mgkv-plt-opts-svp-y\").val();\n      opts.group = $(\"#mgkv-plt-opts-svp-grp\").val();\n      opts.thr[0] = parseFloat($(\"#mgkv-plt-opts-svp-thr0\").val());\n      opts.thr[1] = parseFloat($(\"#mgkv-plt-opts-svp-thr1\").val());\n      this._last_plot = \"#mgkv-volcano-sg\";\n      this._sgVolcanoPlot(opts);\n    });\n    $(\"#mgkv-plt-opts-svp select\").on(\"change\", ()=>{\n      $(\"#mgkv-volcano-sg\").trigger(\"click\");\n    })\n  }\n  /**\n   * Check if the input files have a correct name\n   * @param {string} fileName\n   * @param {string} dataType\n   * @returns\n   */\n  _validInput(fileName, dataType) {\n    return (\n      (fileName.match(\".*.count.txt$\") && dataType == SGC_DT) ||\n      (fileName.match(\".*.gene_summary.txt$\") && dataType == GS_DT) ||\n      (fileName.match(\".*.sgrna_summary.txt$\") && dataType == SGS_DT)\n    );\n  }\n\n  datarevision = 0;\n\n  /**\n   * Draw the plot\n   * @param {PlotlyData} data\n   * @param {PlotlyDataLayoutConfig} layout\n   */\n  _plot(data, layout) {\n    this.datarevision += 1;\n    layout.datarevision = this.datarevision;\n    Plotly.react(document.getElementById(\"mgkv-plotly\"), data, layout);\n  }\n  /**\n   * Plot a sgRNA plot of the currently selected sgRNAs\n   * @param {{norm : string, scale : string}} userOpts User options for drawing the plot\n   * @returns void\n   */\n  _sgLinePlot(userOpts) {\n    let opts = Object.assign({ norm: \"raw\", scale: \"log10\" }, userOpts);\n    if (this.data.selectedGenes.length == 0) {\n      this._plot([], {\n        title: \"Select one or more gene to see the expression of their sgRNAs\",\n      });\n      return;\n    }\n    let data = [];\n    let genes = this.data.selectedGenes.map((sg) => sg.name);\n    this.data.sg_data.getData(\"filtered\").then((response) => {\n      response.data.forEach((sg) => {\n        let gene = this.data.selectedGenes.find((g) => g.name == sg.gene);\n        let gene_idx = genes.indexOf(sg.gene);\n        let dat = {\n          x: [],\n          y: [],\n          order: gene_idx,\n          name: sg.sgrna + \" (\" + sg.gene + \")\",\n          type: \"scatter\",\n          marker: { color: gene.color, size: 15 },\n          line: { color: gene.color },\n        };\n        sg.counts.forEach((c, i) => {\n          dat.x.push(this.samples[i].name);\n          let nc = this.data.normalization_factors[opts.norm][i] * c;\n          if (opts.scale == \"log10\") {\n            dat.y.push(nc == 0 ? 0 : Math.log10(nc));\n          } else if (opts.scale == \"log2\") {\n            dat.y.push(nc == 0 ? 0 : Math.log2(nc));\n          } else {\n            dat.y.push(nc);\n          }\n        });\n        if (gene_idx > 0) {\n          dat.xaxis = \"x\" + (gene_idx + 1);\n          dat.yaxis = \"y\" + (gene_idx + 1);\n        }\n        data.push(dat);\n      });\n      let layout = {\n        title: \"sgRNA expression plot\",\n        xaxis: { title: genes[0] },\n        yaxis: {\n          title:\n            (opts.scale == \"linear\" ? \"\" : opts.scale + \" \") +\n            (opts.norm == \"raw\" ? \"raw\" : opts.norm + \" normalized\") +\n            \" counts\",\n        },\n      };\n      genes.forEach((g, idx) => {\n        if (idx > 0) {\n          layout[\"xaxis\" + (idx + 1)] = { title: g };\n          layout[\"yaxis\" + (idx + 1)] = { title: layout.yaxis.title };\n        }\n      });\n      if (genes.length > 1) {\n        layout.grid = {\n          rows: genes.length > 2 ? Math.ceil(genes.length / 2) : 1,\n          columns: 2,\n          pattern: \"independent\",\n        };\n      }\n      data = data.sort((a, b) => a.order - b.order);\n      this._plot(data, layout);\n    });\n  }\n\n  /**\n   * Draw a BoxPlot of all the sgRNA\n   * @param {{norm: string, scale : string}} userOpts define the normalization and the scale of the sgRNA counts\n   */\n  _sgBoxPlot(userOpts) {\n    let opts = Object.assign({ norm: \"raw\", scale: \"log10\" }, userOpts);\n    let data = this.data.samples.map((s) => {\n      return { y: [], name: s.name, order: s.order, type: \"box\" };\n    });\n    this.data.sg_data.data.forEach((dat) => {\n      dat.counts.forEach((c, idx) => {\n        let nc = this.data.normalization_factors[opts.norm][idx] * c;\n        if (opts.scale == \"log10\") {\n          data[idx].y.push(nc == 0 ? 0 : Math.log10(nc));\n        } else if (opts.scale == \"log2\") {\n          data[idx].y.push(nc == 0 ? 0 : Math.log2(nc));\n        } else {\n          data[idx].y.push(nc);\n        }\n      });\n    });\n    data = data.sort((a, b) => a.order - b.order);\n    let layout = {\n      title: \"sgRNA boxplot\",\n      xaxis: { title: \"Sample\" },\n      yaxis: {\n        title:\n          (opts.scale == \"linear\" ? \"\" : opts.scale + \" \") +\n          (opts.norm == \"raw\" ? \"raw\" : opts.norm + \" normalized\") +\n          \" counts\",\n      },\n    };\n    this._plot(data, layout);\n  }\n  /**\n   *\n   * @param {{value : string, group : string, thr : number[]}} userOpts define the value (pvalue, FDR), group (best, low, high) and thresholds [pvalue_thr, LFC_thr ]\n   */\n  _geneVolcanoPlot(userOpts) {\n    let opts = Object.assign(\n      { value: \"pvalue\", group: \"best\", thr: [0.05, 1] },\n      userOpts\n    );\n    let thr_x = opts.thr[1];\n    let thr_y = opts.thr[0];\n    let layout = {\n      title: \"Genes Volcano Plot\",\n      xaxis: { title: \"LogFC\" },\n      yaxis: { title: opts.value },\n    };\n    let data = [\n      {\n        mode: \"markers\",\n        type: \"scatter\",\n        x: [],\n        y: [],\n        text: [],\n        name: \"Neg\",\n        marker: { color: \"#7CC6FE\" },\n      },\n      {\n        mode: \"markers\",\n        type: \"scatter\",\n        x: [],\n        y: [],\n        text: [],\n        name: \"Const\",\n        marker: { color: \"#BFBFBF\" },\n      },\n      {\n        mode: \"markers\",\n        type: \"scatter\",\n        x: [],\n        y: [],\n        text: [],\n        name: \"Pos\",\n        marker: { color: \"#FF7D83\" },\n      },\n    ];\n    if (this.data.selectedGenes.length > 0) {\n      this.data.selectedGenes.forEach((g) => {\n        data.push({\n          mode: \"markers+text\",\n          type: \"scatter\",\n          x: [],\n          y: [],\n          text: [],\n          name: g.name,\n          textposition: \"top center\",\n          marker: { color: g.color, size: 14 },\n        });\n      });\n    }\n    let min_y = 1;\n    this.data.gene_data.data.forEach((d) => {\n      let x,\n        y,\n        text = d.gene;\n      if (opts.group == \"best\") {\n        x = d.LFC;\n        y = d[opts.value];\n      } else {\n        x = d[opts.group].LFC;\n        y = d[opts.group][opts.value];\n      }\n      if (y != 0 && min_y > y) {\n        min_y = y;\n      }\n\n      let grp = this.data.selectedGenes.findIndex((sg) => sg.name == d.gene);\n      if (grp == -1) {\n        grp = y > thr_y ? 1 : x < -thr_x ? 0 : x > thr_x ? 2 : 1;\n      } else {\n        grp = grp + 3;\n      }\n      data[grp].x.push(x);\n      data[grp].y.push(y == 0 ? -1 : -Math.log10(y));\n      data[grp].text.push(text);\n    });\n    let max_y = -Math.log10(min_y);\n    data.forEach((dat) => {\n      dat.y = dat.y.map((y) => (y == -1 ? max_y : y));\n    });\n\n    this._plot(data, layout);\n  }\n\n  /**\n   * sgRNA volcano plot\n   * @param {*} userOpts define the value (pvalue, FDR, pLow, pHigh) and thresholds [pvalue_thr, LFC_thr ]\n   */\n  _sgVolcanoPlot(userOpts) {\n    let opts = Object.assign({ value: \"pvalue\", thr: [0.05, 1] }, userOpts);\n    let thr_x = opts.thr[1];\n    let thr_y = opts.thr[0];\n    let layout = {\n      title: \"sgRNA Volcano Plot\",\n      xaxis: { title: \"LogFC\" },\n      yaxis: { title: opts.value },\n    };\n\n    let data = [\n      {\n        mode: \"markers\",\n        type: \"scatter\",\n        x: [],\n        y: [],\n        text: [],\n        name: \"Neg\",\n        marker: { color: \"#7CC6FE\" },\n      },\n      {\n        mode: \"markers\",\n        type: \"scatter\",\n        x: [],\n        y: [],\n        text: [],\n        name: \"Const\",\n        marker: { color: \"#BFBFBF\" },\n      },\n      {\n        mode: \"markers\",\n        type: \"scatter\",\n        x: [],\n        y: [],\n        text: [],\n        name: \"Pos\",\n        marker: { color: \"#FF7D83\" },\n      },\n    ];\n    if (this.data.selectedGenes.length > 0) {\n      this.data.selectedGenes.forEach((g) => {\n        data.push({\n          mode: \"markers+text\",\n          type: \"scatter\",\n          x: [],\n          y: [],\n          text: [],\n          name: g.name,\n          textposition: \"top center\",\n          marker: { color: g.color, size: 14 },\n        });\n      });\n    }\n    let min_y = 1, min_x=0, max_x=0;\n    let data_points=[];\n    this.data.sg_data.data.forEach((d) => {\n      let x,\n        y,\n        text = d.sgrna;\n      x = d.LFC;\n      y = d[opts.value];\n\n      if (y != 0 && min_y > y) {\n        min_y = y;\n      }\n\n      let grp = this.data.selectedGenes.findIndex((sg) => sg.name == d.gene);\n      if (grp == -1) {\n        grp = y > thr_y ? 1 : x < -thr_x ? 0 : x > thr_x ? 2 : 1;\n      } else {\n        grp = grp + 3;\n      }\n      if ( x < min_x ){\n        min_x = x\n      }\n      if (x > max_x ){\n        max_x = x\n      }\n      data_points.push({x: x, y : y == 0 ? -1 : -Math.log10(y), text : text, grp : grp});\n    });\n    let max_y = -Math.log10(min_y);\n    data_points.forEach((dat) => {\n      dat.y = dat.y == -1 ? max_y : dat.y;\n    });\n    /// create a grid and add only 10 data points for each grid\n    let grid = {};\n    data_points.forEach((dat)=>{\n      let keep = dat.grp > 2;\n      if ( ! keep ){\n        let grid_x = Math.round(((dat.x - min_x) *300 )/ (max_x - min_x))\n        let grid_y = Math.round(((dat.y ) *100 )/ (max_y ))\n        let grid_k =grid_x+\":\"+grid_y; \n        if ( ! grid[grid_k] ){\n          grid[grid_k]=1;\n          keep=true;\n        } else {\n          if ( grid[grid_k] <= 100 ){\n            keep=true;\n            grid[grid_k]+=1;\n          }\n        }\n      }\n      if ( keep ){\n        data[dat.grp].x.push(dat.x);\n        data[dat.grp].y.push(dat.y);\n        data[dat.grp].text.push(dat.text);\n      }\n    })\n\n    this._plot(data, layout);\n  }\n\n  /**\n   * Initialize the DataTables.net instances\n   * @returns void\n   */\n  _initTables() {\n    return new Promise((resolve, reject) => {\n      if (!this.ready) {\n        reject(\"Not ready\");\n        return;\n      }\n      this.root.removeClass(\"visually-hidden\");\n      if (this.geneTable) {\n        this.geneTable.destroy();\n      }\n      if (this.sgTable) {\n        this.sgTable.destroy();\n      }\n      $(\"#mgkv-gene-table\").empty();\n      $(\"#mgkv-sg-table\").empty();\n      this.geneTable = $(\"#mgkv-gene-table\").DataTable({\n        scrollY: \"500px\",\n        scrollCollapse: true,\n        dom:\n          \"<'row'<'col-sm-12 mb-2'B>>\" +\n          \"<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>\" +\n          \"<'row'<'col-sm-12'tr>>\" +\n          \"<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>\",\n        serverSide: true,\n        processing: true,\n        search: { regex: true, smart: false },\n        ajax: (request, callback) => {\n          this.data\n            .getGeneData(request, this._display_count_normalization)\n            .then((response) => {\n              callback(response);\n            });\n        },\n        colReorder: true,\n        rowId: \"gene\",\n        buttons: [\n          {\n            text: \"Download\",\n            action: (_, bt, btn) => {\n              this.data\n                .getGeneData(\"filtered\", this._display_count_normalization)\n                .then((response) => {});\n            },\n          },\n          \"colvis\",\n          {\n            extend: \"searchBuilder\",\n            config: {\n              conditions: {\n                num: { \"!null\": null, null: null },\n                string: { \"!null\": null, null: null },\n              },\n            },\n          },\n        ],\n        order: [[2, \"desc\"]],\n        columns: [\n          {\n            title: \"Gene\",\n            data: \"gene\",\n            orderable: true,\n            searchable: true,\n          },\n          {\n            title: \"sgRNA\",\n            data: \"numSgRNA\",\n            orderable: true,\n            searchable: true,\n          },\n          {\n            title: \"logFC\",\n            data: \"LFC\",\n            orderable: true,\n            searchable: true,\n            visible: true,\n          },\n          {\n            title: \"FDR\",\n            data: \"FDR\",\n            orderable: true,\n            searchable: true,\n            visible: true,\n          },\n          {\n            title: \"p-value\",\n            data: \"pvalue\",\n            orderable: true,\n            searchable: true,\n            visible: true,\n          },\n          {\n            title: \"Rank\",\n            data: \"rank\",\n            orderable: true,\n            searchable: true,\n            visible: true,\n          },\n          {\n            title: \"Neg score\",\n            data: \"neg.score\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Neg pvalue\",\n            data: \"neg.pvalue\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Neg FDR\",\n            data: \"neg.FDR\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Neg rank\",\n            data: \"neg.rank\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Neg good\",\n            data: \"neg.good\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Neg LFC\",\n            data: \"neg.LFC\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Pos score\",\n            data: \"pos.score\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Pos pvalue\",\n            data: \"pos.pvalue\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Pos FDR\",\n            data: \"pos.FDR\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Pos rank\",\n            data: \"pos.rank\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Pos good\",\n            data: \"pos.good\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n          {\n            title: \"Pos LFC\",\n            data: \"pos.LFC\",\n            orderable: true,\n            searchable: true,\n            visible: false,\n          },\n        ],\n      });\n      let sgTableCols = [\n        {\n          title: \"sgRNA\",\n          data: \"sgrna\",\n          orderable: true,\n          searchable: true,\n        },\n        {\n          title: \"Library\",\n          data: \"library\",\n          orderable: true,\n          searchable: true,\n        },\n        {\n          title: \"Gene\",\n          data: \"gene\",\n          name: \"gene\",\n          orderable: true,\n          searchable: true,\n        },\n        {\n          title: \"logFC\",\n          data: \"LFC\",\n          orderable: true,\n          searchable: true,\n        },\n        {\n          title: \"Score\",\n          data: \"score\",\n          orderable: true,\n          searchable: true,\n        },\n        {\n          title: \"p-value neg\",\n          data: \"pLow\",\n          orderable: true,\n          searchable: true,\n          visible: false,\n        },\n        {\n          title: \"p-value pos\",\n          data: \"pHigh\",\n          orderable: true,\n          searchable: true,\n          visible: false,\n        },\n        {\n          title: \"p-value\",\n          data: \"pvalue\",\n          orderable: true,\n          searchable: true,\n        },\n        {\n          title: \"FDR\",\n          data: \"FDR\",\n          orderable: true,\n          searchable: true,\n        },\n        {\n          title: \"Ctr. Var\",\n          data: \"control_var\",\n          orderable: true,\n          searchable: true,\n          visible: false,\n        },\n        {\n          title: \"Adj. Var\",\n          data: \"adj_var\",\n          orderable: true,\n          searchable: true,\n          visible: false,\n        },\n      ];\n      this.samples.forEach((sam, idx) => {\n        sgTableCols.push({\n          title: sam.name,\n          data: sam.name,\n          orderable: true,\n          searchable: true,\n          visible: true,\n        });\n      });\n\n      this.sgTable = $(\"#mgkv-sg-table\").DataTable({\n        scrollY: \"500px\",\n        scrollCollapse: true,\n        dom:\n          \"<'row'<'col-sm-12 mb-2'B>>\" +\n          \"<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>\" +\n          \"<'row'<'col-sm-12'tr>>\" +\n          \"<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>\",\n        serverSide: true,\n        processing: true,\n        search: { regex: true, smart: false },\n        ajax: (request, callback) => {\n          this.data\n            .getSgRNAData(request, this._display_count_normalization)\n            .then((response) => {\n              callback(response);\n            });\n        },\n        colReorder: true,\n        rowId: \"sgrna\",\n        buttons: [\n          {\n            text: \"Download\",\n            action: (_, bt, btn) => {\n              this.data\n                .getSgRNAData(\"filtered\", this._display_count_normalization)\n                .then((response) => {\n                  let out = this.data.sg_data.header.join(\"\\t\") + \"\\n\";\n                  response.data.forEach((d) => {\n                    out +=\n                      [\n                        d.sgrna,\n                        d.gene,\n                        d.control_count,\n                        d.treatment_count,\n                        d.means[0],\n                        d.means[1],\n                        d.LFC,\n                        d.control_var,\n                        d.adj_var,\n                        d.score,\n                        d.pLow,\n                        d.pHigh,\n                        d.pvalue,\n                        d.FDR,\n                        d.highInTreatment ? \"True\" : \"False\",\n                      ].join(\"\\t\") + \"\\n\";\n                  });\n                  download(\"mageck_view.filtered.sg_counts.txt\", out);\n                });\n            },\n          },\n          {\n            text: \"Download with counts\",\n            action: (_, bt, btn) => {\n              this.data\n                .getSgRNAData(\"filtered\", this._display_count_normalization)\n                .then((response) => {\n                  let out =\n                    this.data.sg_data.header.join(\"\\t\") +\n                    this.data.samples.map((s) => s.name).join(\"\\t\") +\n                    \"\\n\";\n                  response.data.forEach((d) => {\n                    out +=\n                      [\n                        d.sgrna,\n                        d.gene,\n                        d.control_count,\n                        d.treatment_count,\n                        d.means[0],\n                        d.means[1],\n                        d.LFC,\n                        d.control_var,\n                        d.adj_var,\n                        d.score,\n                        d.pLow,\n                        d.pHigh,\n                        d.pvalue,\n                        d.FDR,\n                        d.highInTreatment ? \"True\" : \"False\",\n                      ].join(\"\\t\") +\n                      \"\\t\" +\n                      this.data.samples.map((s) => d[s.name]).join(\"\\t\") +\n                      \"\\n\";\n                  });\n                  download(\"mageck_view.filtered.sg_counts.txt\", out);\n                });\n            },\n          },\n\n          \"colvis\",\n          \"searchBuilder\",\n          {\n            extend: \"collection\",\n            text: \"Count types\",\n            buttons: [\n              {\n                text: \"Raw counts\",\n                className:\n                  this._display_count_normalization == \"raw\"\n                    ? \"active norm-buttons\"\n                    : \"norm-buttons\",\n                action: (_, dt, btn) => {\n                  if (this._display_count_normalization != \"raw\") {\n                    $(\".norm-buttons\").removeClass(\"active\");\n                    btn.addClass(\"active\");\n                    this._display_count_normalization = \"raw\";\n                    dt.rows().invalidate().draw(false);\n                  }\n                },\n              },\n              {\n                text: \"Median normalized\",\n                className:\n                  this._display_count_normalization == \"median\"\n                    ? \"active norm-buttons\"\n                    : \"norm-buttons\",\n                action: (_, dt, btn) => {\n                  if (this._display_count_normalization != \"median\") {\n                    $(\".norm-buttons\").removeClass(\"active\");\n                    btn.addClass(\"active\");\n                    this._display_count_normalization = \"median\";\n                    dt.rows().invalidate().draw(false);\n                  }\n                },\n              },\n              {\n                text: \"Total normalized\",\n                className:\n                  this._display_count_normalization == \"total\"\n                    ? \"active norm-buttons\"\n                    : \"norm-buttons\",\n                action: (_, dt, btn) => {\n                  if (this._display_count_normalization != \"total\") {\n                    $(\".norm-buttons\").removeClass(\"active\");\n                    btn.addClass(\"active\");\n                    this._display_count_normalization = \"total\";\n                    dt.rows().invalidate().draw(false);\n                  }\n                },\n              },\n              {\n                text: \"Control normalized\",\n                className:\n                  this._display_count_normalization == \"control\"\n                    ? \"active norm-buttons\"\n                    : \"norm-buttons\",\n                action: (_, dt, btn) => {\n                  if (this._display_count_normalization != \"control\") {\n                    $(\".norm-buttons\").removeClass(\"active\");\n                    btn.addClass(\"active\");\n                    this._display_count_normalization = \"control\";\n                    dt.rows().invalidate().draw(false);\n                  }\n                },\n              },\n            ],\n          },\n          {\n            extend: \"collection\",\n            text: \"Download count table\",\n            buttons: [\n              {\n                text: \"Raw\",\n                action: (_, dt) => {\n                  this.data.getSgRNAData(\"filtered\", \"raw\").then((response) => {\n                    let outfile =\n                      \"sgRNA\\tGene\\t\" +\n                      this.samples.map((sam) => sam.name).join(\"\\t\") +\n                      \"\\n\";\n                    response.data.forEach((d) => {\n                      outfile +=\n                        d.sgrna +\n                        \"\\t\" +\n                        d.gene +\n                        \"\\t\" +\n                        this.samples.map((sam) => d[sam.name]).join(\"\\t\") +\n                        \"\\n\";\n                    });\n                    download(\"raw.counts.txt\", outfile);\n                  });\n                },\n              },\n              {\n                text: \"Median normalized\",\n                action: (_, dt) => {\n                  this.data\n                    .getSgRNAData(\"filtered\", \"median\")\n                    .then((response) => {\n                      let outfile =\n                        \"sgRNA\\tGene\\t\" +\n                        this.samples.map((sam) => sam.name).join(\"\\t\") +\n                        \"\\n\";\n                      response.data.forEach((d) => {\n                        outfile +=\n                          d.sgrna +\n                          \"\\t\" +\n                          d.gene +\n                          \"\\t\" +\n                          this.samples.map((sam) => d[sam.name]).join(\"\\t\") +\n                          \"\\n\";\n                      });\n                      download(\"median.counts.txt\", outfile);\n                    });\n                },\n              },\n              {\n                text: \"Total normalized\",\n                action: (_, dt) => {\n                  this.data\n                    .getSgRNAData(\"filtered\", \"total\")\n                    .then((response) => {\n                      let outfile =\n                        \"sgRNA\\tGene\\t\" +\n                        this.samples.map((sam) => sam.name).join(\"\\t\") +\n                        \"\\n\";\n                      response.data.forEach((d) => {\n                        outfile +=\n                          d.sgrna +\n                          \"\\t\" +\n                          d.gene +\n                          \"\\t\" +\n                          this.samples.map((sam) => d[sam.name]).join(\"\\t\") +\n                          \"\\n\";\n                      });\n                      download(\"total.counts.txt\", outfile);\n                    });\n                },\n              },\n              {\n                text: \"Control normalized\",\n                action: (_, dt) => {\n                  this.data\n                    .getSgRNAData(\"filtered\", \"control\")\n                    .then((response) => {\n                      let outfile =\n                        \"sgRNA\\tGene\\t\" +\n                        this.samples.map((sam) => sam.name).join(\"\\t\") +\n                        \"\\n\";\n                      response.data.forEach((d) => {\n                        outfile +=\n                          d.sgrna +\n                          \"\\t\" +\n                          d.gene +\n                          \"\\t\" +\n                          this.samples.map((sam) => d[sam.name]).join(\"\\t\") +\n                          \"\\n\";\n                      });\n                      download(\"control.counts.txt\", outfile);\n                    });\n                },\n              },\n            ],\n          },\n        ],\n        order: [[3, \"desc\"]],\n        columns: sgTableCols,\n      });\n      $(\"#mgkv-gene-table tbody\").on(\"click\", \"tr\", (el) => {\n        let $el = $(el.currentTarget);\n        let gene = $el.attr(\"id\");\n        if (this.data.isSelected(gene)) {\n          $el.removeClass(\"selected\");\n        } else {\n          $el.addClass(\"selected\");\n        }\n        this.data.toggleGene(gene);\n        this.sgTable.draw();\n        if ( PLOTS_WITH_SELECTION.includes(this._last_plot) ){\n          $(this._last_plot).trigger(\"click\");\n        }\n      });\n      $(\"#mgkv-boxplot-sgrna\").trigger(\"click\");\n      this.afterInit();\n      resolve();\n      return true;\n    });\n  }\n\n  /**\n   * Enable or disable the loading div\n   * @param {boolean} enable\n   * @returns Promise<void>\n   */\n  _loading(enable = true) {\n    return new Promise((resolve, reject) => {\n      if (enable) {\n        $(\"body\").append(\n          \"<div id='mgkv-loading' class='position-absolute z-3 top-0 start-0 vh-100 vw-100 d-flex align-items-center justify-content-center bg-light'><div class='spinner-border text-success me-2' role='status'></div><h3>Loading the data</h3></div>\"\n        );\n      } else {\n        $(\"#mgkv-loading\").remove();\n      }\n      setTimeout(resolve, 100);\n    });\n  }\n}\n\nexport { MGKV as default };\n"],"names":["Alerts","constructor","timeout","this","alertBox","$","addClass","css","append","_initMessage","text","cssClass","alert","alert_text","close_button","on","e","remove","setTimeout","warning","error","success","basic_search","dat","search","gene","match","sgrna","library","DataHandler","data","header","_order","_filtered","_prevSearch","_prevOrder","_prevNormalization","async","norm","normalization_factors","samples","forEach","d","s","idx","name","Math","round","counts","request","out","draw","recordsTotal","length","recordsFiltered","map","v","basic","builder","searchBuilder","selected_genes","JSON","stringify","has_basic_search","value","has_builder_search","criteria","has_selected_genes","Array","keys","filter","el","includes","builder_search","opts","crit","type","parseFloat","op","origData","getData","split","condition","startsWith","endsWith","push","logic","generateSearcher","order","parse","order_col","columns","column","order_dir","dir","sort","a","b","slice","start","COLOR_P","MageckData","gene_data","sg_data","_selectedGenes","_prevNorm","sgLibrary","control_gene","colors","setColorPalette","ready","toggleGene","findIndex","g","color","splice","isSelected","selectedGenes","apply_normalization","Promise","resolve","reject","line","numSgRNA","parseInt","neg","score","pvalue","FDR","rank","good","LFC","pos","best","abs","ranking","r","parseGeneSummaryData","control_count","treatment_count","means","control_var","adj_var","pLow","pHigh","highInTreatment","parseSgRNASummaryData","replace","parseSgCountData","hasLibrary","parseLibrary","file","libraryName","reader","FileReader","onload","result","readAsText","onloadend","lib","sgrnas","sg","find","sgl","computeNormalizationFactors","console","log","_computeControlNormFactor","d1","fill","_computeMedianNormFactor","n","m","meanVal","cnt","reduce","p","exp","c","medianFactor","ni","meanFactor","xFactor","floor","_computeTotalNormFactor","sumSamples","i","avgSample","raw","total","median","control","download","filename","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","SGC_DT","SGS_DT","GS_DT","PLOTS_WITH_SELECTION","root","_initSgBoxplot","_initVolcanoPlot","_initSgLinePlot","alerts","geneTable","undefined","sgTable","_display_count_normalization","_last_plot","afterInit","libName","setControlGene","data_type","_validInput","exec","parseSgCount","parseGeneSummary","parseSgRNASummary","then","res","catch","err","_loading","mergeCountSummary","_initTables","removeClass","scale","val","_sgBoxPlot","trigger","_sgLinePlot","group","thr","_geneVolcanoPlot","_sgVolcanoPlot","fileName","dataType","datarevision","_plot","layout","Plotly","react","getElementById","userOpts","Object","assign","title","genes","response","gene_idx","indexOf","x","y","marker","size","nc","log10","log2","xaxis","yaxis","grid","rows","ceil","pattern","thr_x","thr_y","mode","textposition","min_y","grp","max_y","min_x","max_x","data_points","keep","grid_k","destroy","empty","DataTable","scrollY","scrollCollapse","dom","serverSide","processing","regex","smart","ajax","callback","getGeneData","colReorder","rowId","buttons","action","_","bt","btn","extend","config","conditions","num","null","string","orderable","searchable","visible","sgTableCols","sam","getSgRNAData","join","className","dt","invalidate","outfile","$el","currentTarget","attr","enable"],"mappings":"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"}