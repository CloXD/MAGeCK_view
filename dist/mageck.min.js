var MGKV=function(t){"use strict";function e(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var a=e($);class s{constructor(t=2e3){this.timeout=t,this.alertBox=$("<div></div>"),this.alertBox.addClass("fixed-bottom"),this.alertBox.css("width","100vw"),$("body").append(this.alertBox)}_initMessage(t,e){let a=$("<div></div>");a.addClass("alert alert-dismissible"),a.css("width","100vw"),a.css("margin-bottom","0"),a.css("margin-top","5px");let s=$("<span></span>");s.text(t);let l=$("<button></button>");l.addClass("btn-close"),l.on("click",(t=>{a.remove()})),a.append(s),a.append(l),setTimeout((()=>{a.remove()}),this.timeout),a.addClass(e),this.alertBox.append(a)}warning(t){this._initMessage(t,"alert-warning")}error(t){this._initMessage(t,"alert-danger")}success(t){this._initMessage(t,"alert-success")}}function l(t,e){return t.gene.match(e)||t.sgrna&&t.sgrna.match(e)||t.library&&t.library.match(e)}class o{constructor(){}data=[];header=[];_order=[];_filtered=[];_prevSearch="{}";_prevOrder="{}";_prevNormalization="";async apply_normalization(t,e,a){this._prevNormalization!=t&&this.data.forEach((s=>{a.forEach(((a,l)=>{s[a.name]=Math.round(s.counts[l]*e[t][l]*100)/100}))}))}async getData(t){let e={draw:t.draw,recordsTotal:this.data.length,recordsFiltered:0,data:[]};if("filtered"==t)return e.data=this._order.map((t=>this.data[t])),e;if("all"==t)return e.data=this.data,e;let a={basic:t.search,builder:t.searchBuilder,selected_genes:t.selected_genes};if(this._prevSearch!=JSON.stringify(a)){this._prevSearch=JSON.stringify(a);let t=a.basic&&a.basic.value&&a.basic.value.length>0,e=a.builder&&a.builder&&a.builder.criteria&&a.builder.criteria.length>0,s=a.selected_genes&&a.selected_genes.length>0;if(this._filtered=[...Array(this.data.length).keys()],s&&(this._filtered=this._filtered.filter((t=>a.selected_genes.includes(this.data[t].gene)))),e){let e=function(t){let e=[];return t.criteria.forEach((t=>{"num"==t.type&&(t.value=t.value.map((t=>parseFloat(t))));let a=t=>!0,s=t.origData,l=t=>t[s];switch(s.includes(".")&&(s=s.split("."),l=t=>t[s[0]][s[1]]),t.condition){case"!=":a=e=>l(e)!=t.value[0];break;case"=":a=e=>l(e)==t.value[0];break;case"<":a=e=>l(e)<t.value[0];break;case"<=":a=e=>l(e)<=t.value[0];break;case">":a=e=>l(e)>t.value[0];break;case">=":a=e=>l(e)>=t.value[0];break;case"between":a=e=>l(e)>=t.value[0]&&l(e)<=t.value[1];break;case"!between":a=e=>l(e)<t.value[0]||l(e)>t.value[1];break;case"starts":a=e=>l(e).startsWith(t.value[0]);break;case"!starts":a=e=>!l(e).startsWith(t.value[0]);break;case"contains":a=e=>l(e).includes(t.value[0]);break;case"!contains":a=e=>!l(e).includes(t.value[0]);break;case"ends":a=e=>l(e).endsWith(t.value[0]);break;case"!ends":a=e=>!l(e).endsWith(t.value[0])}e.push(a)})),"AND"==t.logic?t=>{for(let a in e)if(!e[a](t))return!1;return!0}:t=>{let a=!1;for(let s in e)a=a||e[s](t);return a}}(a.builder);this._filtered=t?this._filtered.filter((t=>l(this.data[t],a.basic.value))).filter((t=>e(this.data[t]))):this._filtered.filter((t=>e(this.data[t])))}else t&&(this._filtered=this._filtered.filter((t=>l(this.data[t],a.basic.value))))}if(this._prevOrder!=JSON.stringify(t.order)||this._filtered.length>this._order.length){this._prevOrder=JSON.stringify(t.order),this._order=JSON.parse(JSON.stringify(this._filtered));let e=t.columns[t.order[0].column].data,a="asc"==t.order[0].dir?1:-1;e.includes(".")?(e=e.split("."),this._order.sort(((t,s)=>this.data[t][e[0]][e[1]]>this.data[s][e[0]][e[1]]?a:-a))):this._order.sort(((t,s)=>this.data[t][e]>this.data[s][e]?a:-a))}return this._filtered.length!=this._order.length&&(this._order=this._order.filter((t=>this._filtered.includes(t)))),e.data=this._order.slice(t.start,t.start+t.length).map((t=>this.data[t])),e.recordsFiltered=this._filtered.length,e}get length(){return this.data.length}}const r=["#04AF54","#AFAA05","#5D05AF","#AF0585","#68DE3D"];class i{constructor(){}gene_data=new o;sg_data=new o;samples=[];header=[];_selectedGenes=[];_prevNorm="";sgLibrary=[];counts=!1;control_gene="NO-TARGET";colors=r;setColorPalette(t){if(typeof t!=typeof this.colors)throw"Wrong color types. Expectd "+typeof this.colors+", got "+typeof t;this.colors=t}get ready(){return this.gene_data.length>0&&this.sg_data.length&&this.counts}toggleGene(t){let e=this._selectedGenes.findIndex((e=>e.name==t));-1==e?this._selectedGenes.push({name:t,color:this.colors[this._selectedGenes.length%this.colors.length]}):this._selectedGenes.splice(e,1)}isSelected(t){return-1!=this._selectedGenes.findIndex((e=>e.name==t))}get selectedGenes(){return this._selectedGenes}async getGeneData(t){let e=await this.gene_data.getData(t);return e.data.forEach((t=>{this.isSelected(t.gene)?t.DT_RowClass="selected":t.DT_RowClass=""})),e}async getSgRNAData(t,e){return this._prevNorm!=e&&(await this.sg_data.apply_normalization(e,this.normalization_factors,this.samples),this._prevNorm=e),"string"!=typeof t&&(t.selected_genes=this._selectedGenes.map((t=>t.name))),await this.sg_data.getData(t)}async parseGeneSummary(t){let e=await function(t){return new Promise(((e,a)=>{let s,l={data:[],header:[]};t=t.split("\n");for(let e=0;e<t.length;e++)if(s=t[e].split("\t"),0==e){if("id"!=s[0]||"num"!=s[1]||14!=s.length)return void a("The input file is not a gene Summary generated by MAGeCK.");l.header=s}else if(14==s.length){let t={gene:s[0],numSgRNA:parseInt(s[1]),neg:{score:parseFloat(s[2]),pvalue:parseFloat(s[3]),FDR:parseFloat(s[4]),rank:parseFloat(s[5]),good:parseInt(s[6]),LFC:parseFloat(s[7])},pos:{score:parseFloat(s[8]),pvalue:parseFloat(s[9]),FDR:parseFloat(s[10]),rank:parseFloat(s[11]),good:parseInt(s[12]),LFC:parseFloat(s[13])},best:"pos",rank:0};t.neg.pvalue==t.pos.pvalue?Math.abs(t.neg.LFC)>t.pos.LFC&&(t.best="neg"):t.neg.pvalue<t.pos.pvalue&&(t.best="neg"),t.LFC=t[t.best].LFC,t.pvalue=t[t.best].pvalue,t.FDR=t[t.best].FDR,l.data.push(t)}let o=[...Array(l.data.length).keys()];o=o.sort(((t,e)=>l.data[t].LFC>l.data[e].LFC?-1:1)),o.forEach(((t,e)=>{l.data[t].rank=e})),e(l)}))}(t);this.gene_data.data=e.data,this.gene_data.header=t.header}async parseSgRNASummary(t){let e=await function(t){return new Promise(((e,a)=>{let s,l={data:[],header:[]};t=t.split("\n");for(let e=0;e<t.length;e++)if(s=t[e].split("\t"),0==e){if("sgrna"!=s[0]||"Gene"!=s[1]||15!=s.length)return void a("The input file is not a single guide RNA Summary generated by MAGeCK.");l.header=s}else 15==s.length&&l.data.push({sgrna:s[0],gene:s[1],control_count:s[2],treatment_count:s[3],means:s.slice(4,6).map((t=>parseFloat(t))),LFC:parseFloat(s[6]),control_var:parseFloat(s[7]),adj_var:parseFloat(s[8]),score:parseFloat(s[9]),pLow:parseFloat(s[10]),pHigh:parseFloat(s[11]),pvalue:parseFloat(s[12]),FDR:parseFloat(s[13]),highInTreatment:"True"==s[14]});e(l)}))}(t);this.sg_data.data=e.data,this.sg_data.header=e.header}async parseSgCount(t){let e=await function(t){return new Promise(((e,a)=>{let s,l={counts:{},samples:[]};t=t.split("\n");for(let e=0;e<t.length;e++)if(s=t[e].split("\t"),0==e){if("sgRNA"!=s[0]||"Gene"!=s[1])return void a("The input file is not a sgRNA count generated by MAGeCK.");l.samples=s.slice(2).map(((t,e)=>({name:t.replace(".","_"),order:e})))}else l.counts[s[0]]=s.slice(2).map((t=>parseFloat(t)));e(l)}))}(t);this.counts=e.counts,this.samples=e.samples}get hasLibrary(){return this.sgLibrary.length>0}parseLibrary(t,e){return new Promise(((a,s)=>{let l=new FileReader,o="";l.onload=()=>{o+=l.result},l.readAsText(t),l.onloadend=()=>{let t,s={name:e,sgrnas:[]};o=o.split("\n");for(let e=0;e<o.length;e++)t=o[e].split("\t"),s.sgrnas.push(t[0]);this.sgLibrary.push(s),a(this.sgLibrary.length-1)}}))}async mergeCountSummary(){this.hasLibrary?this.sg_data.data.forEach((t=>{t.counts=this.counts[t.sgrna],t.library=this.sgLibrary.find((e=>e.sgrnas.includes(t.sgrna)))?.name})):this.sg_data.data.forEach((t=>{t.counts=this.counts[t.sgrna],t.library=t.sgrna.match(/^[0-9]+$/)?"libA":"libB"})),this.counts=!0,this.normalization_factors=this.computeNormalizationFactors(this.sg_data.data),console.log(this.normalization_factors)}_computeControlNormFactor(t){let e=t.filter((t=>t.gene==this.control_gene));return 0==e.length?Array(t[0].counts.length).fill(1):this._computeMedianNormFactor(e)}_computeMedianNormFactor(t){let e=t[0].counts.length,a=t.length,s=Array(a).fill(-1);t.forEach(((t,a)=>{t.counts.reduce(((t,e)=>t+e),0)>0&&(s[a]=Math.exp(1*t.counts.map((t=>Math.log(t+1))).reduce(((t,e)=>t+e),0)/e),s[a]<=0&&(s[a]=1))}));let l=Array(e).fill(0);for(let a=0;a<e;a++){let e=t.map(((t,e)=>t.counts[a]/s[e])).filter(((t,e)=>-1!=s[e])),o=e.sort()[Math.floor(e.length/2)];l[a]=o>0?1/o:0}return l}_computeTotalNormFactor(t){let e=t[0].counts.length;t.length;let a=Array(e).fill(0);t.forEach((t=>{t.counts.forEach(((t,e)=>a[e]+=t))}));let s=a.reduce(((t,e)=>t+e),0)/e;return a.map((t=>s/t))}computeNormalizationFactors(t){let e={};return e.raw=Array(t[0].counts.length).fill(1),e.total=this._computeTotalNormFactor(t),e.median=this._computeMedianNormFactor(t),e.control=this._computeControlNormFactor(t),e}}function n(t,e){var a=document.createElement("a");a.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(e)),a.setAttribute("download",t),a.style.display="none",document.body.appendChild(a),a.click(),document.body.removeChild(a)}const d="sgrna",c="sgrnaSummary",p="geneSummary",g=["#mgkv-line-sgrna","#mgkv-volcano-gene","#mgkv-volcano-sg"];return class{constructor(t){this.root="string"==typeof t?a.default(t):t,this.root.addClass("visually-hidden"),this.root.append(a.default("<div class='row'><div class='col-12'><h3>Genes summary</h3></div><div class='col-12'><table class='table table-striped table-bordered' id='mgkv-gene-table'></table></div></div>")),this.root.append(a.default("<div class='row'><div class='col-12 mt-3'><h3>sgRNA summary</h3></div><div class='col-12'><table class='table table-striped table-bordered' id='mgkv-sg-table'></table></div></div>")),this.root.append(a.default("<div class='row'><div class='col-12 mt-3'><h3>Plots </h3></div><div class='col-12'><div id='mgkv-plotly-buttons' class='btn-group'></div></div><div class='col-12 mt-2'><div id='mgkv-plotly-options'></div></div><div class='col-12'><div id='mgkv-plotly' style='min-height:80vh'></div></div></div>")),this._initSgBoxplot(),this._initVolcanoPlot(),this._initSgLinePlot(),this.alerts=new s,this.data=new i}geneTable=void 0;sgTable=void 0;_display_count_normalization="raw";_last_plot="";afterInit=()=>{};parseLibrary(t,e){return this.data.parseLibrary(t,e)}get library(){return this.data.sgLibrary}setControlGene(t){this.data.control_gene=t}parse(t,e){return new Promise(((a,s)=>{if(this._validInput(t.name,e)){let l=new FileReader,o="";l.onload=()=>{o+=l.result},l.readAsText(t),l.onloadend=()=>{let l;e==d&&(l=this.data.parseSgCount(o)),e==p&&(l=this.data.parseGeneSummary(o)),e==c&&(l=this.data.parseSgRNASummary(o)),l.then((e=>{this.alerts.success("File "+t.name+" imported correctly"),a(e)})).catch((t=>{console.log(t),this.alerts.error(t),s(t)}))}}else this.alerts.error("The file has an invalid name. Please, use the outputs of MAGeCK."),s("Invalid name")}))}async load(){if(!this.ready)throw"Not ready";await this._loading(!0),await this.data.mergeCountSummary(),await this._initTables(),await this._loading(!1)}get ready(){return this.data.ready}get samples(){return this.data.samples}_initSgBoxplot(){a.default("#mgkv-plotly-buttons").append("<button class='btn btn-primary' id='mgkv-boxplot-sgrna'>sgRNA boxplot</button>"),a.default("#mgkv-plotly-options").append("<div id='mgkv-plt-opts-sgb' class='btn-group mgkv-plt-opts row visually-hidden'><div class='col'><select class='form-select' id='mgkv-plt-opts-sgb-norm'><option value='raw' selected>Raw counts</option><option value='total'>Total normalization</option><option value='median'>Median normalization</option><option value='control'>Control normalization (equal median of NO-TARGET sgRNA)</option></select></div><div class='col'><select class='form-select' id='mgkv-plt-opts-sgb-scale'><option value='log10' selected>Log10</option><option value='linear'>Linear</option><option value='log2'>Log2</option></select></div></div>"),a.default("#mgkv-boxplot-sgrna").on("click",(()=>{a.default("#mgkv-plotly-buttons>button").removeClass("active"),a.default("#mgkv-boxplot-sgrna").addClass("active"),a.default(".mgkv-plt-opts").addClass("visually-hidden"),a.default("#mgkv-plt-opts-sgb").removeClass("visually-hidden");let t={norm:"raw",scale:"log10"};t.norm=a.default("#mgkv-plt-opts-sgb-norm").val(),t.scale=a.default("#mgkv-plt-opts-sgb-scale").val(),this._last_plot="#mgkv-boxplot-sgrna",this._sgBoxPlot(t)})),a.default("#mgkv-plt-opts-sgb select").on("change",(()=>{a.default("#mgkv-boxplot-sgrna").trigger("click")}))}_initSgLinePlot(){a.default("#mgkv-plotly-buttons").append("<button class='btn btn-primary' id='mgkv-line-sgrna'>sgRNA expression</button>"),a.default("#mgkv-plotly-options").append("<div id='mgkv-plt-opts-sgl' class='btn-group mgkv-plt-opts row visually-hidden'><div class='col'><select class='form-select' id='mgkv-plt-opts-sgl-norm'><option value='raw' selected>Raw counts</option><option value='total'>Total normalization</option><option value='median'>Median normalization</option><option value='control'>Control normalization (NO-TARGET sgRNA)</option></select></div><div class='col'><select class='form-select' id='mgkv-plt-opts-sgl-scale'><option value='log10' selected>Log10</option><option value='linear'>Linear</option><option value='log2'>Log2</option></select></div></div>"),a.default("#mgkv-line-sgrna").on("click",(()=>{a.default("#mgkv-plotly-buttons>button").removeClass("active"),a.default("#mgkv-line-sgrna").addClass("active"),a.default(".mgkv-plt-opts").addClass("visually-hidden"),a.default("#mgkv-plt-opts-sgl").removeClass("visually-hidden");let t={norm:"raw",scale:"log10"};t.norm=a.default("#mgkv-plt-opts-sgl-norm").val(),t.scale=a.default("#mgkv-plt-opts-sgl-scale").val(),this._last_plot="#mgkv-line-sgrna",this._sgLinePlot(t)})),a.default("#mgkv-plt-opts-sgl select").on("change",(()=>{a.default("#mgkv-line-sgrna").trigger("click")}))}_initVolcanoPlot(){a.default("#mgkv-plotly-buttons").append("<button class='btn btn-primary' id='mgkv-volcano-gene'>Genes Volcano Plot</button>"),a.default("#mgkv-plotly-buttons").append("<button class='btn btn-primary' id='mgkv-volcano-sg'>sgRNA Volcano Plot</button>"),a.default("#mgkv-plotly-options").append("<div id='mgkv-plt-opts-gvp' class='btn-group mgkv-plt-opts row visually-hidden'><div class='col'><select class='form-select' id='mgkv-plt-opts-gvp-y'><option value='pvalue' selected>p-value</option><option value='FDR'>FDR</option></select></div><div class='col'><select class='form-select' id='mgkv-plt-opts-gvp-grp'><option value='best' selected title='Most significant between positive and negative p-value'>Best</option><option value='neg'>Negative</option><option value='pos'>Positive</option></select></div><div class='col'><div class='input-group'><span class='input-group-text'>Significance threshold</span><input class='form-control' id='mgkv-plt-opts-gvp-thr0' type='number' value='0.05' ></div></div><div class='col'><div class='input-group'><span class='input-group-text'>Absolute LogFC threshold</span><input class='form-control' id='mgkv-plt-opts-gvp-thr1' type='number' value='1.0' ></div></div></div>"),a.default("#mgkv-plotly-options").append("<div id='mgkv-plt-opts-svp' class='btn-group mgkv-plt-opts row visually-hidden'><div class='col'><select class='form-select' id='mgkv-plt-opts-svp-y'><option value='pvalue' selected>p-value</option><option value='FDR'>FDR</option><option value='pLow'>p-value low</option><option value='pHigh'>p-value high</option></select></div><div class='col'><div class='input-group'><span class='input-group-text'>Significance threshold</span><input class='form-control' id='mgkv-plt-opts-svp-thr0' type='number' value='0.05' ></div></div><div class='col'><div class='input-group'><span class='input-group-text'>Absolute LogFC threshold</span><input class='form-control' id='mgkv-plt-opts-svp-thr1' type='number' value='1.0' ></div></div><small>For performance reasons some data in dense regions are omitted.</small></div>"),a.default("#mgkv-volcano-gene").on("click",(()=>{a.default("#mgkv-plotly-buttons>button").removeClass("active"),a.default("#mgkv-volcano-gene").addClass("active"),a.default(".mgkv-plt-opts").addClass("visually-hidden"),a.default("#mgkv-plt-opts-gvp").removeClass("visually-hidden");let t={value:"pvalue",group:"best",thr:[.05,1]};t.value=a.default("#mgkv-plt-opts-gvp-y").val(),t.group=a.default("#mgkv-plt-opts-gvp-grp").val(),t.thr[0]=parseFloat(a.default("#mgkv-plt-opts-gvp-thr0").val()),t.thr[1]=parseFloat(a.default("#mgkv-plt-opts-gvp-thr1").val()),this._last_plot="#mgkv-volcano-gene",this._geneVolcanoPlot(t)})),a.default("#mgkv-plt-opts-gvp select").on("change",(()=>{a.default("#mgkv-volcano-gene").trigger("click")})),a.default("#mgkv-volcano-sg").on("click",(()=>{a.default("#mgkv-plotly-buttons>button").removeClass("active"),a.default("#mgkv-volcano-sg").addClass("active"),a.default(".mgkv-plt-opts").addClass("visually-hidden"),a.default("#mgkv-plt-opts-svp").removeClass("visually-hidden");let t={value:"pvalue",thr:[.05,1]};t.value=a.default("#mgkv-plt-opts-svp-y").val(),t.group=a.default("#mgkv-plt-opts-svp-grp").val(),t.thr[0]=parseFloat(a.default("#mgkv-plt-opts-svp-thr0").val()),t.thr[1]=parseFloat(a.default("#mgkv-plt-opts-svp-thr1").val()),this._last_plot="#mgkv-volcano-sg",this._sgVolcanoPlot(t)})),a.default("#mgkv-plt-opts-svp select").on("change",(()=>{a.default("#mgkv-volcano-sg").trigger("click")}))}_validInput(t,e){return t.match(".*.count.txt$")&&e==d||t.match(".*.gene_summary.txt$")&&e==p||t.match(".*.sgrna_summary.txt$")&&e==c}datarevision=0;_plot(t,e){this.datarevision+=1,e.datarevision=this.datarevision,Plotly.react(document.getElementById("mgkv-plotly"),t,e)}_sgLinePlot(t){let e=Object.assign({norm:"raw",scale:"log10"},t);if(0==this.data.selectedGenes.length)return void this._plot([],{title:"Select one or more gene to see the expression of their sgRNAs"});let a=[],s=this.data.selectedGenes.map((t=>t.name));this.data.sg_data.getData("filtered").then((t=>{t.data.forEach((t=>{let l=this.data.selectedGenes.find((e=>e.name==t.gene)),o=s.indexOf(t.gene),r={x:[],y:[],order:o,name:t.sgrna+" ("+t.gene+")",type:"scatter",marker:{color:l.color,size:15},line:{color:l.color}};t.counts.forEach(((t,a)=>{r.x.push(this.samples[a].name);let s=this.data.normalization_factors[e.norm][a]*t;"log10"==e.scale?r.y.push(0==s?0:Math.log10(s)):"log2"==e.scale?r.y.push(0==s?0:Math.log2(s)):r.y.push(s)})),o>0&&(r.xaxis="x"+(o+1),r.yaxis="y"+(o+1)),a.push(r)}));let l={title:"sgRNA expression plot",xaxis:{title:s[0]},yaxis:{title:("linear"==e.scale?"":e.scale+" ")+("raw"==e.norm?"raw":e.norm+" normalized")+" counts"}};s.forEach(((t,e)=>{e>0&&(l["xaxis"+(e+1)]={title:t},l["yaxis"+(e+1)]={title:l.yaxis.title})})),s.length>1&&(l.grid={rows:s.length>2?Math.ceil(s.length/2):1,columns:2,pattern:"independent"}),a=a.sort(((t,e)=>t.order-e.order)),this._plot(a,l)}))}_sgBoxPlot(t){let e=Object.assign({norm:"raw",scale:"log10"},t),a=this.data.samples.map((t=>({y:[],name:t.name,order:t.order,type:"box"})));this.data.sg_data.data.forEach((t=>{t.counts.forEach(((t,s)=>{let l=this.data.normalization_factors[e.norm][s]*t;"log10"==e.scale?a[s].y.push(0==l?0:Math.log10(l)):"log2"==e.scale?a[s].y.push(0==l?0:Math.log2(l)):a[s].y.push(l)}))})),a=a.sort(((t,e)=>t.order-e.order));let s={title:"sgRNA boxplot",xaxis:{title:"Sample"},yaxis:{title:("linear"==e.scale?"":e.scale+" ")+("raw"==e.norm?"raw":e.norm+" normalized")+" counts"}};this._plot(a,s)}_geneVolcanoPlot(t){let e=Object.assign({value:"pvalue",group:"best",thr:[.05,1]},t),a=e.thr[1],s=e.thr[0],l={title:"Genes Volcano Plot",xaxis:{title:"LogFC"},yaxis:{title:e.value}},o=[{mode:"markers",type:"scatter",x:[],y:[],text:[],name:"Neg",marker:{color:"#7CC6FE"}},{mode:"markers",type:"scatter",x:[],y:[],text:[],name:"Const",marker:{color:"#BFBFBF"}},{mode:"markers",type:"scatter",x:[],y:[],text:[],name:"Pos",marker:{color:"#FF7D83"}}];this.data.selectedGenes.length>0&&this.data.selectedGenes.forEach((t=>{o.push({mode:"markers+text",type:"scatter",x:[],y:[],text:[],name:t.name,textposition:"top center",marker:{color:t.color,size:14}})}));let r=1;this.data.gene_data.data.forEach((t=>{let l,i,n=t.gene;"best"==e.group?(l=t.LFC,i=t[e.value]):(l=t[e.group].LFC,i=t[e.group][e.value]),0!=i&&r>i&&(r=i);let d=this.data.selectedGenes.findIndex((e=>e.name==t.gene));-1==d?d=i>s?1:l<-a?0:l>a?2:1:d+=3,o[d].x.push(l),o[d].y.push(0==i?-1:-Math.log10(i)),o[d].text.push(n)}));let i=-Math.log10(r);o.forEach((t=>{t.y=t.y.map((t=>-1==t?i:t))})),this._plot(o,l)}_sgVolcanoPlot(t){let e=Object.assign({value:"pvalue",thr:[.05,1]},t),a=e.thr[1],s=e.thr[0],l={title:"sgRNA Volcano Plot",xaxis:{title:"LogFC"},yaxis:{title:e.value}},o=[{mode:"markers",type:"scatter",x:[],y:[],text:[],name:"Neg",marker:{color:"#7CC6FE"}},{mode:"markers",type:"scatter",x:[],y:[],text:[],name:"Const",marker:{color:"#BFBFBF"}},{mode:"markers",type:"scatter",x:[],y:[],text:[],name:"Pos",marker:{color:"#FF7D83"}}];this.data.selectedGenes.length>0&&this.data.selectedGenes.forEach((t=>{o.push({mode:"markers+text",type:"scatter",x:[],y:[],text:[],name:t.name,textposition:"top center",marker:{color:t.color,size:14}})}));let r=1,i=0,n=0,d=[];this.data.sg_data.data.forEach((t=>{let l,o,c=t.sgrna;l=t.LFC,o=t[e.value],0!=o&&r>o&&(r=o);let p=this.data.selectedGenes.findIndex((e=>e.name==t.gene));-1==p?p=o>s?1:l<-a?0:l>a?2:1:p+=3,l<i&&(i=l),l>n&&(n=l),d.push({x:l,y:0==o?-1:-Math.log10(o),text:c,grp:p})}));let c=-Math.log10(r);d.forEach((t=>{t.y=-1==t.y?c:t.y}));let p={};d.forEach((t=>{let e=t.grp>2;if(!e){let a=Math.round(300*(t.x-i)/(n-i))+":"+Math.round(100*t.y/c);p[a]?p[a]<=100&&(e=!0,p[a]+=1):(p[a]=1,e=!0)}e&&(o[t.grp].x.push(t.x),o[t.grp].y.push(t.y),o[t.grp].text.push(t.text))})),this._plot(o,l)}_initTables(){return new Promise(((t,e)=>{if(!this.ready)return void e("Not ready");this.root.removeClass("visually-hidden"),this.geneTable&&this.geneTable.destroy(),this.sgTable&&this.sgTable.destroy(),a.default("#mgkv-gene-table").empty(),a.default("#mgkv-sg-table").empty(),this.geneTable=a.default("#mgkv-gene-table").DataTable({scrollY:"500px",scrollCollapse:!0,dom:"<'row'<'col-sm-12 mb-2'B>><'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",serverSide:!0,processing:!0,search:{regex:!0,smart:!1},ajax:(t,e)=>{this.data.getGeneData(t,this._display_count_normalization).then((t=>{e(t)}))},colReorder:!0,rowId:"gene",buttons:[{text:"Download",action:(t,e,a)=>{this.data.getGeneData("filtered",this._display_count_normalization).then((t=>{}))}},"colvis",{extend:"searchBuilder",config:{conditions:{num:{"!null":null,null:null},string:{"!null":null,null:null}}}}],order:[[2,"desc"]],columns:[{title:"Gene",data:"gene",orderable:!0,searchable:!0},{title:"sgRNA",data:"numSgRNA",orderable:!0,searchable:!0},{title:"logFC",data:"LFC",orderable:!0,searchable:!0,visible:!0},{title:"FDR",data:"FDR",orderable:!0,searchable:!0,visible:!0},{title:"p-value",data:"pvalue",orderable:!0,searchable:!0,visible:!0},{title:"Rank",data:"rank",orderable:!0,searchable:!0,visible:!0},{title:"Neg score",data:"neg.score",orderable:!0,searchable:!0,visible:!1},{title:"Neg pvalue",data:"neg.pvalue",orderable:!0,searchable:!0,visible:!1},{title:"Neg FDR",data:"neg.FDR",orderable:!0,searchable:!0,visible:!1},{title:"Neg rank",data:"neg.rank",orderable:!0,searchable:!0,visible:!1},{title:"Neg good",data:"neg.good",orderable:!0,searchable:!0,visible:!1},{title:"Neg LFC",data:"neg.LFC",orderable:!0,searchable:!0,visible:!1},{title:"Pos score",data:"pos.score",orderable:!0,searchable:!0,visible:!1},{title:"Pos pvalue",data:"pos.pvalue",orderable:!0,searchable:!0,visible:!1},{title:"Pos FDR",data:"pos.FDR",orderable:!0,searchable:!0,visible:!1},{title:"Pos rank",data:"pos.rank",orderable:!0,searchable:!0,visible:!1},{title:"Pos good",data:"pos.good",orderable:!0,searchable:!0,visible:!1},{title:"Pos LFC",data:"pos.LFC",orderable:!0,searchable:!0,visible:!1}]});let s=[{title:"sgRNA",data:"sgrna",orderable:!0,searchable:!0},{title:"Library",data:"library",orderable:!0,searchable:!0},{title:"Gene",data:"gene",name:"gene",orderable:!0,searchable:!0},{title:"logFC",data:"LFC",orderable:!0,searchable:!0},{title:"Score",data:"score",orderable:!0,searchable:!0},{title:"p-value neg",data:"pLow",orderable:!0,searchable:!0,visible:!1},{title:"p-value pos",data:"pHigh",orderable:!0,searchable:!0,visible:!1},{title:"p-value",data:"pvalue",orderable:!0,searchable:!0},{title:"FDR",data:"FDR",orderable:!0,searchable:!0},{title:"Ctr. Var",data:"control_var",orderable:!0,searchable:!0,visible:!1},{title:"Adj. Var",data:"adj_var",orderable:!0,searchable:!0,visible:!1}];return this.samples.forEach(((t,e)=>{s.push({title:t.name,data:t.name,orderable:!0,searchable:!0,visible:!0})})),this.sgTable=a.default("#mgkv-sg-table").DataTable({scrollY:"500px",scrollCollapse:!0,dom:"<'row'<'col-sm-12 mb-2'B>><'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",serverSide:!0,processing:!0,search:{regex:!0,smart:!1},ajax:(t,e)=>{this.data.getSgRNAData(t,this._display_count_normalization).then((t=>{e(t)}))},colReorder:!0,rowId:"sgrna",buttons:[{text:"Download",action:(t,e,a)=>{this.data.getSgRNAData("filtered",this._display_count_normalization).then((t=>{let e=this.data.sg_data.header.join("\t")+"\n";t.data.forEach((t=>{e+=[t.sgrna,t.gene,t.control_count,t.treatment_count,t.means[0],t.means[1],t.LFC,t.control_var,t.adj_var,t.score,t.pLow,t.pHigh,t.pvalue,t.FDR,t.highInTreatment?"True":"False"].join("\t")+"\n"})),n("mageck_view.filtered.sg_counts.txt",e)}))}},{text:"Download with counts",action:(t,e,a)=>{this.data.getSgRNAData("filtered",this._display_count_normalization).then((t=>{let e=this.data.sg_data.header.join("\t")+this.data.samples.map((t=>t.name)).join("\t")+"\n";t.data.forEach((t=>{e+=[t.sgrna,t.gene,t.control_count,t.treatment_count,t.means[0],t.means[1],t.LFC,t.control_var,t.adj_var,t.score,t.pLow,t.pHigh,t.pvalue,t.FDR,t.highInTreatment?"True":"False"].join("\t")+"\t"+this.data.samples.map((e=>t[e.name])).join("\t")+"\n"})),n("mageck_view.filtered.sg_counts.txt",e)}))}},"colvis","searchBuilder",{extend:"collection",text:"Count types",buttons:[{text:"Raw counts",className:"raw"==this._display_count_normalization?"active norm-buttons":"norm-buttons",action:(t,e,s)=>{"raw"!=this._display_count_normalization&&(a.default(".norm-buttons").removeClass("active"),s.addClass("active"),this._display_count_normalization="raw",e.rows().invalidate().draw(!1))}},{text:"Median normalized",className:"median"==this._display_count_normalization?"active norm-buttons":"norm-buttons",action:(t,e,s)=>{"median"!=this._display_count_normalization&&(a.default(".norm-buttons").removeClass("active"),s.addClass("active"),this._display_count_normalization="median",e.rows().invalidate().draw(!1))}},{text:"Total normalized",className:"total"==this._display_count_normalization?"active norm-buttons":"norm-buttons",action:(t,e,s)=>{"total"!=this._display_count_normalization&&(a.default(".norm-buttons").removeClass("active"),s.addClass("active"),this._display_count_normalization="total",e.rows().invalidate().draw(!1))}},{text:"Control normalized",className:"control"==this._display_count_normalization?"active norm-buttons":"norm-buttons",action:(t,e,s)=>{"control"!=this._display_count_normalization&&(a.default(".norm-buttons").removeClass("active"),s.addClass("active"),this._display_count_normalization="control",e.rows().invalidate().draw(!1))}}]},{extend:"collection",text:"Download count table",buttons:[{text:"Raw",action:(t,e)=>{this.data.getSgRNAData("filtered","raw").then((t=>{let e="sgRNA\tGene\t"+this.samples.map((t=>t.name)).join("\t")+"\n";t.data.forEach((t=>{e+=t.sgrna+"\t"+t.gene+"\t"+this.samples.map((e=>t[e.name])).join("\t")+"\n"})),n("raw.counts.txt",e)}))}},{text:"Median normalized",action:(t,e)=>{this.data.getSgRNAData("filtered","median").then((t=>{let e="sgRNA\tGene\t"+this.samples.map((t=>t.name)).join("\t")+"\n";t.data.forEach((t=>{e+=t.sgrna+"\t"+t.gene+"\t"+this.samples.map((e=>t[e.name])).join("\t")+"\n"})),n("median.counts.txt",e)}))}},{text:"Total normalized",action:(t,e)=>{this.data.getSgRNAData("filtered","total").then((t=>{let e="sgRNA\tGene\t"+this.samples.map((t=>t.name)).join("\t")+"\n";t.data.forEach((t=>{e+=t.sgrna+"\t"+t.gene+"\t"+this.samples.map((e=>t[e.name])).join("\t")+"\n"})),n("total.counts.txt",e)}))}},{text:"Control normalized",action:(t,e)=>{this.data.getSgRNAData("filtered","control").then((t=>{let e="sgRNA\tGene\t"+this.samples.map((t=>t.name)).join("\t")+"\n";t.data.forEach((t=>{e+=t.sgrna+"\t"+t.gene+"\t"+this.samples.map((e=>t[e.name])).join("\t")+"\n"})),n("control.counts.txt",e)}))}}]}],order:[[3,"desc"]],columns:s}),a.default("#mgkv-gene-table tbody").on("click","tr",(t=>{let e=a.default(t.currentTarget),s=e.attr("id");this.data.isSelected(s)?e.removeClass("selected"):e.addClass("selected"),this.data.toggleGene(s),this.sgTable.draw(),g.includes(this._last_plot)&&a.default(this._last_plot).trigger("click")})),a.default("#mgkv-boxplot-sgrna").trigger("click"),this.afterInit(),t(),!0}))}_loading(t=!0){return new Promise(((e,s)=>{t?a.default("body").append("<div id='mgkv-loading' class='position-absolute z-3 top-0 start-0 vh-100 vw-100 d-flex align-items-center justify-content-center bg-light'><div class='spinner-border text-success me-2' role='status'></div><h3>Loading the data</h3></div>"):a.default("#mgkv-loading").remove(),setTimeout(e,100)}))}}}();
//# sourceMappingURL=mageck.min.js.map
